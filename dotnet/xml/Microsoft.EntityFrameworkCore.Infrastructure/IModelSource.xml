<Type Name="IModelSource" FullName="Microsoft.EntityFrameworkCore.Infrastructure.IModelSource">
  <TypeSignature Language="C#" Value="public interface IModelSource" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IModelSource" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Infrastructure.IModelSource" />
  <TypeSignature Language="VB.NET" Value="Public Interface IModelSource" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <para>
                    Produces an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" /> based on a context. This is typically implemented by database providers to ensure that any
                    conventions and validation specific to their database are used.
                </para>
      <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetModel">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IModel GetModel (Microsoft.EntityFrameworkCore.DbContext context, Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder conventionSetBuilder, Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator validator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IModel GetModel(class Microsoft.EntityFrameworkCore.DbContext context, class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder conventionSetBuilder, class Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator validator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.IModelSource.GetModel(Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder,Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetModel (context As DbContext, conventionSetBuilder As IConventionSetBuilder, validator As IModelValidator) As IModel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" />
        <Parameter Name="conventionSetBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder" />
        <Parameter Name="validator" Type="Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator" />
      </Parameters>
      <Docs>
        <param name="context"> The context the model is being produced for. </param>
        <param name="conventionSetBuilder"> The convention set to use when creating the model. </param>
        <param name="validator"> The validator to verify the model can be successfully used with the context. </param>
        <summary>
                Gets the model to be used.
            </summary>
        <returns> The model to be used. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModel">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IModel GetModel (Microsoft.EntityFrameworkCore.DbContext context, Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder conventionSetBuilder, Microsoft.EntityFrameworkCore.Internal.IModelValidator validator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IModel GetModel(class Microsoft.EntityFrameworkCore.DbContext context, class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder conventionSetBuilder, class Microsoft.EntityFrameworkCore.Internal.IModelValidator validator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.IModelSource.GetModel(Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder,Microsoft.EntityFrameworkCore.Internal.IModelValidator)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetModel (context As DbContext, conventionSetBuilder As IConventionSetBuilder, validator As IModelValidator) As IModel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" />
        <Parameter Name="conventionSetBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder" />
        <Parameter Name="validator" Type="Microsoft.EntityFrameworkCore.Internal.IModelValidator" />
      </Parameters>
      <Docs>
        <param name="context"> The context the model is being produced for. </param>
        <param name="conventionSetBuilder"> The convention set to use when creating the model. </param>
        <param name="validator"> The validator to verify the model can be successfully used with the context. </param>
        <summary>
                Gets the model to be used.
            </summary>
        <returns> The model to be used. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>