<Type Name="EntityFrameworkServicesBuilder" FullName="Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder">
  <TypeSignature Language="C#" Value="public class EntityFrameworkServicesBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EntityFrameworkServicesBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class EntityFrameworkServicesBuilder" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces></Interfaces>
  <Docs>
    <summary>
      <para>
                    A builder API designed for database providers to use when registering services.
                </para>
      <para>
                    Providers should create an instance of this class, use its methods to register
                    services, and then call <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.TryAddCoreServices" /> to fill out the remaining Entity
                    Framework services.
                </para>
      <para>
                    Relational providers should use 'EntityFrameworkRelationalServicesBuilder instead.
                </para>
      <para>
                    Entity Framework ensures that services are registered with the appropriate scope. In some cases a provider
                    may register a service with a different scope, but great care must be taken that all its dependencies
                    can handle the new scope, and that it does not cause issue for services that depend on it.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityFrameworkServicesBuilder (Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serviceCollection As IServiceCollection)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Parameters>
      <Docs>
        <param name="serviceCollection"> The collection to which services will be registered. </param>
        <summary>
                Used by database providers to create a new <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder" /> for
                registration of provider services. Relational providers should use
                'EntityFrameworkRelationalServicesBuilder'.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoreServices">
      <MemberSignature Language="C#" Value="public static readonly System.Collections.Generic.IDictionary&lt;Type,Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.ServiceCharacteristics&gt; CoreServices;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Collections.Generic.IDictionary`2&lt;class System.Type, valuetype Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder/ServiceCharacteristics&gt; CoreServices" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.CoreServices" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CoreServices As IDictionary(Of Type, EntityFrameworkServicesBuilder.ServiceCharacteristics) " />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.Type,Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder+ServiceCharacteristics&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>
                    This API supports the Entity Framework Core infrastructure and is not intended to be used
                    directly from your code. This API may change or be removed in future releases.
                </para>
          <para>
                    This dictionary is exposed for testing and provider-validation only.
                    It should not be used from application code.
                </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServiceCharacteristics">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.ServiceCharacteristics GetServiceCharacteristics (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder/ServiceCharacteristics GetServiceCharacteristics(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.GetServiceCharacteristics(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetServiceCharacteristics (serviceType As Type) As EntityFrameworkServicesBuilder.ServiceCharacteristics" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder+ServiceCharacteristics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.Extensions.DependencyInjection.IServiceCollection&gt;.Instance">
      <MemberSignature Language="C#" Value="Microsoft.Extensions.DependencyInjection.IServiceCollection Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.Extensions.DependencyInjection.IServiceCollection&gt;.Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.DependencyInjection.IServiceCollection Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.Extensions.DependencyInjection.IServiceCollection&gt;.Instance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure&lt;Microsoft#Extensions#DependencyInjection#IServiceCollection&gt;#Instance" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Instance As IServiceCollection Implements IInfrastructure(Of IServiceCollection).Instance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>
                    Gets the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> being configured.
                </para>
          <para>
                    This property is intended for use by extension methods that need to make use of services
                    not directly exposed in the public API surface.
                </para>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceCollectionMap">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap ServiceCollectionMap { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap ServiceCollectionMap" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.ServiceCollectionMap" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property ServiceCollectionMap As ServiceCollectionMap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Access to the underlying <see cref="P:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.ServiceCollectionMap" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAdd">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder TryAdd (Type serviceType, object implementation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder TryAdd(class System.Type serviceType, object implementation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.TryAdd(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAdd (serviceType As Type, implementation As Object) As EntityFrameworkServicesBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="implementation" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="serviceType"> The contract for the service. </param>
        <param name="implementation"> The implementation of the service. </param>
        <summary>
                Adds an implementation of an Entity Framework service only if one has not already been registered.
                This method can only be used for singleton services.
            </summary>
        <returns> This builder, such that further calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAdd">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder TryAdd (Type serviceType, Type implementationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder TryAdd(class System.Type serviceType, class System.Type implementationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.TryAdd(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAdd (serviceType As Type, implementationType As Type) As EntityFrameworkServicesBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="implementationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType"> The contract for the service. </param>
        <param name="implementationType"> The concrete type that implements the service. </param>
        <summary>
                Adds an implementation of an Entity Framework service only if one has not already been registered.
                The scope of the service is automatically defined by Entity Framework.
            </summary>
        <returns> This builder, such that further calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAdd">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder TryAdd (Type serviceType, Type implementationType, Func&lt;IServiceProvider,object&gt; factory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder TryAdd(class System.Type serviceType, class System.Type implementationType, class System.Func`2&lt;class System.IServiceProvider, object&gt; factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.TryAdd(System.Type,System.Type,System.Func{System.IServiceProvider,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAdd (serviceType As Type, implementationType As Type, factory As Func(Of IServiceProvider, Object)) As EntityFrameworkServicesBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="implementationType" Type="System.Type" />
        <Parameter Name="factory" Type="System.Func&lt;System.IServiceProvider,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="serviceType"> The contract for the service. </param>
        <param name="implementationType"> The concrete type that implements the service. </param>
        <param name="factory"> The factory that will create the service instance. </param>
        <summary>
                Adds a factory for an Entity Framework service only if one has not already been registered.
                The scope of the service is automatically defined by Entity Framework.
            </summary>
        <returns> This builder, such that further calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAdd&lt;TService&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder TryAdd&lt;TService&gt; (Func&lt;IServiceProvider,TService&gt; factory) where TService : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder TryAdd&lt;class TService&gt;(class System.Func`2&lt;class System.IServiceProvider, !!TService&gt; factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.TryAdd``1(System.Func{System.IServiceProvider,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAdd(Of TService As Class) (factory As Func(Of IServiceProvider, TService)) As EntityFrameworkServicesBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TService">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="factory" Type="System.Func&lt;System.IServiceProvider,TService&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TService"> The contract for the service. </typeparam>
        <param name="factory"> The factory that will create the service instance. </param>
        <summary>
                Adds a factory for an Entity Framework service only if one has not already been registered.
                The scope of the service is automatically defined by Entity Framework.
            </summary>
        <returns> This builder, such that further calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAdd&lt;TService&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder TryAdd&lt;TService&gt; (TService implementation) where TService : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder TryAdd&lt;class TService&gt;(!!TService implementation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.TryAdd``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAdd(Of TService As Class) (implementation As TService) As EntityFrameworkServicesBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TService">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="implementation" Type="TService" />
      </Parameters>
      <Docs>
        <typeparam name="TService"> The contract for the service. </typeparam>
        <param name="implementation"> The implementation of the service. </param>
        <summary>
                Adds an implementation of an Entity Framework service only if one has not already been registered.
                This method can only be used for singleton services.
            </summary>
        <returns> This builder, such that further calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAdd&lt;TService,TImplementation&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder TryAdd&lt;TService,TImplementation&gt; () where TService : class where TImplementation : class, TService;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder TryAdd&lt;class TService, class (!!TService) TImplementation&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.TryAdd``2" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAdd(Of TService As Class, TImplementation As Class) () As EntityFrameworkServicesBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TService">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TImplementation">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <BaseTypeName>TService</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TService"> The contract for the service. </typeparam>
        <typeparam name="TImplementation"> The concrete type that implements the service. </typeparam>
        <summary>
                Adds an implementation of an Entity Framework service only if one has not already been registered.
                The scope of the service is automatically defined by Entity Framework.
            </summary>
        <returns> This builder, such that further calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAdd&lt;TService,TImplementation&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder TryAdd&lt;TService,TImplementation&gt; (Func&lt;IServiceProvider,TImplementation&gt; factory) where TService : class where TImplementation : class, TService;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder TryAdd&lt;class TService, class (!!TService) TImplementation&gt;(class System.Func`2&lt;class System.IServiceProvider, !!TImplementation&gt; factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.TryAdd``2(System.Func{System.IServiceProvider,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAdd(Of TService As Class, TImplementation As Class) (factory As Func(Of IServiceProvider, TImplementation)) As EntityFrameworkServicesBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TService">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TImplementation">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <BaseTypeName>TService</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="factory" Type="System.Func&lt;System.IServiceProvider,TImplementation&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TService"> The contract for the service. </typeparam>
        <typeparam name="TImplementation"> The concrete type that implements the service. </typeparam>
        <param name="factory"> The factory that will create the service instance. </param>
        <summary>
                Adds a factory for an Entity Framework service only if one has not already been registered.
                The scope of the service is automatically defined by Entity Framework.
            </summary>
        <returns> This builder, such that further calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddCoreServices">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder TryAddCoreServices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder TryAddCoreServices() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.TryAddCoreServices" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddCoreServices () As EntityFrameworkServicesBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Registers default implementations of all services not already registered by the provider.
                Database providers must call this method as the last step of service registration--that is,
                after all provider services have been registered.
            </summary>
        <returns> This builder, such that further calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddProviderSpecificServices">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder TryAddProviderSpecificServices (Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap&gt; serviceMap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder TryAddProviderSpecificServices(class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap&gt; serviceMap) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.TryAddProviderSpecificServices(System.Action{Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddProviderSpecificServices (serviceMap As Action(Of ServiceCollectionMap)) As EntityFrameworkServicesBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceMap" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap&gt;" />
      </Parameters>
      <Docs>
        <param name="serviceMap"> The underlying map to which provider services should be added.</param>
        <summary>
                Database providers should call this method for access to the underlying
                <see cref="P:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.ServiceCollectionMap" /> such that provider-specific services can be registered.
                Note that implementations of Entity Framework services should be registered directly on the
                <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder" /> and not through this method.
            </summary>
        <returns> This builder, such that further calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>