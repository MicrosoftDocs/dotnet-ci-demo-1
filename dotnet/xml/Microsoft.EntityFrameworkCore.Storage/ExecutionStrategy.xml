<Type Name="ExecutionStrategy" FullName="Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy">
  <TypeSignature Language="C#" Value="public abstract class ExecutionStrategy : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExecutionStrategy extends System.Object implements class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExecutionStrategy&#xA;Implements IExecutionStrategy" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                The base class for <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" /> implementations.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExecutionStrategy (Microsoft.EntityFrameworkCore.DbContext context, int maxRetryCount, TimeSpan maxRetryDelay);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.DbContext context, int32 maxRetryCount, valuetype System.TimeSpan maxRetryDelay) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.DbContext,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (context As DbContext, maxRetryCount As Integer, maxRetryDelay As TimeSpan)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" />
        <Parameter Name="maxRetryCount" Type="System.Int32" />
        <Parameter Name="maxRetryDelay" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="context"> The context on which the operations will be invoked. </param>
        <param name="maxRetryCount"> The maximum number of retry attempts. </param>
        <param name="maxRetryDelay"> The maximum delay between retries. </param>
        <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExecutionStrategy (Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext context, int maxRetryCount, TimeSpan maxRetryDelay);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext context, int32 maxRetryCount, valuetype System.TimeSpan maxRetryDelay) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (context As ExecutionStrategyContext, maxRetryCount As Integer, maxRetryDelay As TimeSpan)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext" />
        <Parameter Name="maxRetryCount" Type="System.Int32" />
        <Parameter Name="maxRetryDelay" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="context"> The required dependencies. </param>
        <param name="maxRetryCount"> The maximum number of retry attempts. </param>
        <param name="maxRetryDelay"> The maximum delay in milliseconds between retries. </param>
        <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExecutionStrategy (Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies dependencies, int maxRetryCount, TimeSpan maxRetryDelay);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies dependencies, int32 maxRetryCount, valuetype System.TimeSpan maxRetryDelay) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (dependencies As ExecutionStrategyDependencies, maxRetryCount As Integer, maxRetryDelay As TimeSpan)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies" />
        <Parameter Name="maxRetryCount" Type="System.Int32" />
        <Parameter Name="maxRetryDelay" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dependencies"> Parameter object containing service dependencies. </param>
        <param name="maxRetryCount"> The maximum number of retry attempts. </param>
        <param name="maxRetryDelay"> The maximum delay between retries. </param>
        <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CallOnWrappedException&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult CallOnWrappedException&lt;TResult&gt; (Exception exception, Func&lt;Exception,TResult&gt; exceptionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult CallOnWrappedException&lt;TResult&gt;(class System.Exception exception, class System.Func`2&lt;class System.Exception, !!TResult&gt; exceptionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.CallOnWrappedException``1(System.Exception,System.Func{System.Exception,``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
        <Parameter Name="exceptionHandler" Type="System.Func&lt;System.Exception,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"> The return type of <paramref name="exceptionHandler" />. </typeparam>
        <param name="exception"> The exception to be unwrapped. </param>
        <param name="exceptionHandler"> A delegate that will be called with the unwrapped exception. </param>
        <summary>
                Recursively gets InnerException from <paramref name="exception" /> as long as it is an
                exception created by Entity Framework and calls <paramref name="exceptionHandler" /> on the innermost one.
            </summary>
        <returns>
                The result from <paramref name="exceptionHandler" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.DbContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.DbContext Context" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Context" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Context As DbContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The context on which the operations will be invoked.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMaxDelay">
      <MemberSignature Language="C#" Value="protected static readonly TimeSpan DefaultMaxDelay;" />
      <MemberSignature Language="ILAsm" Value=".field family static initonly valuetype System.TimeSpan DefaultMaxDelay" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.DefaultMaxDelay" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly DefaultMaxDelay As TimeSpan " />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The default maximum time delay between retries, must be nonnegative.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMaxRetryCount">
      <MemberSignature Language="C#" Value="protected static readonly int DefaultMaxRetryCount;" />
      <MemberSignature Language="ILAsm" Value=".field family static initonly int32 DefaultMaxRetryCount" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.DefaultMaxRetryCount" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly DefaultMaxRetryCount As Integer " />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The default number of retry attempts.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dependencies">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies Dependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies Dependencies" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Dependencies" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Dependencies As ExecutionStrategyDependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Parameter object containing service dependencies.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionsEncountered">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.List&lt;Exception&gt; ExceptionsEncountered { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.List`1&lt;class System.Exception&gt; ExceptionsEncountered" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExceptionsEncountered" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property ExceptionsEncountered As List(Of Exception)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;System.Exception&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The list of exceptions that caused the operation to be retried so far.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute&lt;TState,TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual TResult Execute&lt;TState,TResult&gt; (Func&lt;TState,TResult&gt; operation, Func&lt;TState,Microsoft.EntityFrameworkCore.Storage.ExecutionResult&lt;TResult&gt;&gt; verifySucceeded, TState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TResult Execute&lt;TState, TResult&gt;(class System.Func`2&lt;!!TState, !!TResult&gt; operation, class System.Func`2&lt;!!TState, class Microsoft.EntityFrameworkCore.Storage.ExecutionResult`1&lt;!!TResult&gt;&gt; verifySucceeded, !!TState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Execute``2(System.Func{``0,``1},System.Func{``0,Microsoft.EntityFrameworkCore.Storage.ExecutionResult{``1}},``0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Execute(Of TState, TResult) (operation As Func(Of TState, TResult), verifySucceeded As Func(Of TState, ExecutionResult(Of TResult)), state As TState) As TResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="operation" Type="System.Func&lt;TState,TResult&gt;" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,Microsoft.EntityFrameworkCore.Storage.ExecutionResult&lt;TResult&gt;&gt;" />
        <Parameter Name="state" Type="TState" />
      </Parameters>
      <Docs>
        <typeparam name="TState"> The type of the state. </typeparam>
        <typeparam name="TResult"> The return type of <paramref name="operation" />. </typeparam>
        <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
        <param name="verifySucceeded"> A delegate that tests whether the operation succeeded even though an exception was thrown. </param>
        <param name="state"> The state that will be passed to the operation. </param>
        <summary>
                Executes the specified operation and returns the result.
            </summary>
        <returns> The result from the operation. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                Thrown if the operation has not succeeded after the configured number of retries.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Execute&lt;TState,TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual TResult Execute&lt;TState,TResult&gt; (TState state, Func&lt;Microsoft.EntityFrameworkCore.DbContext,TState,TResult&gt; operation, Func&lt;Microsoft.EntityFrameworkCore.DbContext,TState,Microsoft.EntityFrameworkCore.Storage.ExecutionResult&lt;TResult&gt;&gt; verifySucceeded);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TResult Execute&lt;TState, TResult&gt;(!!TState state, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.DbContext, !!TState, !!TResult&gt; operation, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.DbContext, !!TState, class Microsoft.EntityFrameworkCore.Storage.ExecutionResult`1&lt;!!TResult&gt;&gt; verifySucceeded) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Execute``2(``0,System.Func{Microsoft.EntityFrameworkCore.DbContext,``0,``1},System.Func{Microsoft.EntityFrameworkCore.DbContext,``0,Microsoft.EntityFrameworkCore.Storage.ExecutionResult{``1}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Execute(Of TState, TResult) (state As TState, operation As Func(Of DbContext, TState, TResult), verifySucceeded As Func(Of DbContext, TState, ExecutionResult(Of TResult))) As TResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="state" Type="TState" />
        <Parameter Name="operation" Type="System.Func&lt;Microsoft.EntityFrameworkCore.DbContext,TState,TResult&gt;" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;Microsoft.EntityFrameworkCore.DbContext,TState,Microsoft.EntityFrameworkCore.Storage.ExecutionResult&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TState"> The type of the state. </typeparam>
        <typeparam name="TResult"> The return type of <paramref name="operation" />. </typeparam>
        <param name="state"> The state that will be passed to the operation. </param>
        <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
        <param name="verifySucceeded"> A delegate that tests whether the operation succeeded even though an exception was thrown. </param>
        <summary>
                Executes the specified operation and returns the result.
            </summary>
        <returns> The result from the operation. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAsync&lt;TState,TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TResult&gt; ExecuteAsync&lt;TState,TResult&gt; (Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Storage.ExecutionResult&lt;TResult&gt;&gt;&gt; verifySucceeded, TState state, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteAsync&lt;TState, TResult&gt;(class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; operation, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;class Microsoft.EntityFrameworkCore.Storage.ExecutionResult`1&lt;!!TResult&gt;&gt;&gt; verifySucceeded, !!TState state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Storage.ExecutionResult{``1}}},``0,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Storage.ExecutionResult&lt;TResult&gt;&gt;&gt;" />
        <Parameter Name="state" Type="TState" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TState"> The type of the state. </typeparam>
        <typeparam name="TResult"> The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />. </typeparam>
        <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
        <param name="verifySucceeded"> A delegate that tests whether the operation succeeded even though an exception was thrown. </param>
        <param name="state"> The state that will be passed to the operation. </param>
        <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
        <summary>
                Executes the specified asynchronous operation and returns the result.
            </summary>
        <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                Thrown if the operation has not succeeded after the configured number of retries.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAsync&lt;TState,TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TResult&gt; ExecuteAsync&lt;TState,TResult&gt; (TState state, Func&lt;Microsoft.EntityFrameworkCore.DbContext,TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation, Func&lt;Microsoft.EntityFrameworkCore.DbContext,TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Storage.ExecutionResult&lt;TResult&gt;&gt;&gt; verifySucceeded, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteAsync&lt;TState, TResult&gt;(!!TState state, class System.Func`4&lt;class Microsoft.EntityFrameworkCore.DbContext, !!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; operation, class System.Func`4&lt;class Microsoft.EntityFrameworkCore.DbContext, !!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;class Microsoft.EntityFrameworkCore.Storage.ExecutionResult`1&lt;!!TResult&gt;&gt;&gt; verifySucceeded, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteAsync``2(``0,System.Func{Microsoft.EntityFrameworkCore.DbContext,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{Microsoft.EntityFrameworkCore.DbContext,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Storage.ExecutionResult{``1}}},System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="state" Type="TState" />
        <Parameter Name="operation" Type="System.Func&lt;Microsoft.EntityFrameworkCore.DbContext,TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;Microsoft.EntityFrameworkCore.DbContext,TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Storage.ExecutionResult&lt;TResult&gt;&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TState"> The type of the state. </typeparam>
        <typeparam name="TResult"> The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />. </typeparam>
        <param name="state"> The state that will be passed to the operation. </param>
        <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
        <param name="verifySucceeded"> A delegate that tests whether the operation succeeded even though an exception was thrown. </param>
        <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
        <summary>
                Executes the specified asynchronous operation and returns the result.
            </summary>
        <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInTransaction&lt;TState,TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual TResult ExecuteInTransaction&lt;TState,TResult&gt; (Func&lt;TState,TResult&gt; operation, Func&lt;TState,bool&gt; verifySucceeded, TState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TResult ExecuteInTransaction&lt;TState, TResult&gt;(class System.Func`2&lt;!!TState, !!TResult&gt; operation, class System.Func`2&lt;!!TState, bool&gt; verifySucceeded, !!TState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteInTransaction``2(System.Func{``0,``1},System.Func{``0,System.Boolean},``0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExecuteInTransaction(Of TState, TResult) (operation As Func(Of TState, TResult), verifySucceeded As Func(Of TState, Boolean), state As TState) As TResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="operation" Type="System.Func&lt;TState,TResult&gt;" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,System.Boolean&gt;" />
        <Parameter Name="state" Type="TState" />
      </Parameters>
      <Docs>
        <typeparam name="TState"> The type of the state. </typeparam>
        <typeparam name="TResult"> The return type of <paramref name="operation" />. </typeparam>
        <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
        <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
        <param name="state"> The state that will be passed to the operation. </param>
        <summary>
                Executes the specified operation in a transaction and returns the result after commiting it.
            </summary>
        <returns> The result from the operation. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                Thrown if the operation has not succeeded after the configured number of retries.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInTransactionAsync&lt;TState,TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TResult&gt; ExecuteInTransactionAsync&lt;TState,TResult&gt; (Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;bool&gt;&gt; verifySucceeded, TState state, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteInTransactionAsync&lt;TState, TResult&gt;(class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; operation, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; verifySucceeded, !!TState state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteInTransactionAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},``0,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
        <Parameter Name="state" Type="TState" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TState"> The type of the state. </typeparam>
        <typeparam name="TResult"> The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />. </typeparam>
        <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
        <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
        <param name="state"> The state that will be passed to the operation. </param>
        <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
        <summary>
                Executes the specified asynchronous operation and returns the result.
            </summary>
        <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                Thrown if the operation has not succeeded after the configured number of retries.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetNextDelay">
      <MemberSignature Language="C#" Value="protected virtual Nullable&lt;TimeSpan&gt; GetNextDelay (Exception lastException);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; GetNextDelay(class System.Exception lastException) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.GetNextDelay(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetNextDelay (lastException As Exception) As Nullable(Of TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.TimeSpan&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lastException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="lastException"> The exception thrown during the last execution attempt. </param>
        <summary>
                Determines whether the operation should be retried and the delay before the next attempt.
            </summary>
        <returns>
                Returns the delay indicating how long to wait for before the next execution attempt if the operation should be retried;
                <c>null</c> otherwise
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Logger">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.Extensions.Logging.ILogger&lt;Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy&gt; Logger { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.Logging.ILogger`1&lt;class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy&gt; Logger" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Logger" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Logger As ILogger(Of IExecutionStrategy)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILogger&lt;Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The logger for this <see cref="T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxRetryCount">
      <MemberSignature Language="C#" Value="protected virtual int MaxRetryCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxRetryCount" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.MaxRetryCount" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property MaxRetryCount As Integer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The maximum number of retry attempts.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxRetryDelay">
      <MemberSignature Language="C#" Value="protected virtual TimeSpan MaxRetryDelay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan MaxRetryDelay" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.MaxRetryDelay" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property MaxRetryDelay As TimeSpan" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The maximum delay between retries.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnFirstExecution">
      <MemberSignature Language="C#" Value="protected virtual void OnFirstExecution ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFirstExecution() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.OnFirstExecution" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFirstExecution ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Method called before the first operation execution
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRetry">
      <MemberSignature Language="C#" Value="protected virtual void OnRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.OnRetry" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRetry ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Method called before retrying the operation execution
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Random">
      <MemberSignature Language="C#" Value="protected virtual Random Random { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Random Random" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Random" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Random As Random" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Random</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                A pseudo-random number generater that can be used to vary the delay between retries.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RetriesOnFailure">
      <MemberSignature Language="C#" Value="public virtual bool RetriesOnFailure { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RetriesOnFailure" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.RetriesOnFailure" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RetriesOnFailure As Boolean" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Indicates whether this <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" /> might retry the execution after a failure.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldRetryOn">
      <MemberSignature Language="C#" Value="protected abstract bool ShouldRetryOn (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ShouldRetryOn(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ShouldRetryOn(System.Exception)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception"> The exception object to be verified. </param>
        <summary>
                Determines whether the specified exception represents a transient failure that can be compensated by a retry.
            </summary>
        <returns>
          <c>true</c> if the specified exception is considered as transient, otherwise <c>false</c>.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldVerifySuccessOn">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldVerifySuccessOn (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ShouldVerifySuccessOn(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ShouldVerifySuccessOn(System.Exception)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception"> The exception object to be verified. </param>
        <summary>
                Determines whether the specified exception could be thrown after a successful execution.
            </summary>
        <returns>
          <c>true</c> if the specified exception could be thrown after a successful execution, otherwise <c>false</c>.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Suspended">
      <MemberSignature Language="C#" Value="protected static bool Suspended { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool Suspended" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Suspended" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Property Suspended As Boolean" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Indicates whether the strategy is suspended. The strategy is typically suspending while executing to avoid
                recursive execution from nested operations.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>