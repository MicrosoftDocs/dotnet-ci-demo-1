<Type Name="EntityTypeBuilder" FullName="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder">
  <TypeSignature Language="C#" Value="public class EntityTypeBuilder : Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableModel&gt;, Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EntityTypeBuilder extends System.Object implements class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableModel&gt;, class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class EntityTypeBuilder&#xA;Implements IInfrastructure(Of IMutableModel), IInfrastructure(Of InternalEntityTypeBuilder)" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableModel&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
                    Provides a simple API for configuring an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />.
                </para>
      <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityTypeBuilder (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As InternalEntityTypeBuilder)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAlternateKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder HasAlternateKey (params string[] propertyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder HasAlternateKey(string[] propertyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasAlternateKey(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasAlternateKey (ParamArray propertyNames As String()) As KeyBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyNames"> The names of the properties that make up the key. </param>
        <summary>
                Creates an alternate key in the model for this entity type if one does not already exist over the specified
                properties. This will force the properties to be read-only. Use <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasIndex(System.String[])" /> to specify uniqueness
                in the model that does not force properties to be read-only.
            </summary>
        <returns> An object that can be used to configure the key. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnnotation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder HasAnnotation (string annotation, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder HasAnnotation(string annotation, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasAnnotation(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasAnnotation (annotation As String, value As Object) As EntityTypeBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="annotation"> The key of the annotation to be added or updated. </param>
        <param name="value"> The value to be stored in the annotation. </param>
        <summary>
                Adds or updates an annotation on the entity type. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
        <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasBaseType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder HasBaseType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder HasBaseType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasBaseType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasBaseType (name As String) As EntityTypeBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the base type. </param>
        <summary>
                Sets the base type of this entity in an inheritance hierarchy.
            </summary>
        <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasBaseType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder HasBaseType (Type entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder HasBaseType(class System.Type entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasBaseType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasBaseType (entityType As Type) As EntityTypeBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="entityType"> The base type. </param>
        <summary>
                Sets the base type of this entity in an inheritance hierarchy.
            </summary>
        <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasChangeTrackingStrategy">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder HasChangeTrackingStrategy (Microsoft.EntityFrameworkCore.ChangeTrackingStrategy changeTrackingStrategy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder HasChangeTrackingStrategy(valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy changeTrackingStrategy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasChangeTrackingStrategy(Microsoft.EntityFrameworkCore.ChangeTrackingStrategy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeTrackingStrategy" Type="Microsoft.EntityFrameworkCore.ChangeTrackingStrategy" />
      </Parameters>
      <Docs>
        <param name="changeTrackingStrategy"> The change tracking strategy to be used. </param>
        <summary>
                Configures the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTrackingStrategy" /> to be used for this entity type.
                This strategy indicates how the context detects changes to properties for an instance of the entity type.
            </summary>
        <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasChangeTrackingStrategy">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder HasChangeTrackingStrategy (Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy changeTrackingStrategy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder HasChangeTrackingStrategy(valuetype Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy changeTrackingStrategy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeTrackingStrategy" Type="Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy" />
      </Parameters>
      <Docs>
        <param name="changeTrackingStrategy"> The change tracking strategy to be used. </param>
        <summary>
                Configures the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy" /> to be used for this entity type.
                This strategy indicates how the context detects changes to properties for an instance of the entity type.
            </summary>
        <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasIndex">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder HasIndex (params string[] propertyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder HasIndex(string[] propertyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasIndex(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasIndex (ParamArray propertyNames As String()) As IndexBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyNames"> The names of the properties that make up the index. </param>
        <summary>
                Configures an index on the specified properties. If there is an existing index on the given
                set of properties, then the existing index will be returned for configuration.
            </summary>
        <returns> An object that can be used to configure the index. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder HasKey (params string[] propertyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder HasKey(string[] propertyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasKey(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasKey (ParamArray propertyNames As String()) As KeyBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyNames"> The names of the properties that make up the primary key. </param>
        <summary>
                Sets the properties that make up the primary key for this entity type.
            </summary>
        <returns> An object that can be used to configure the primary key. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasMany">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder HasMany (string relatedTypeName, string navigationName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder HasMany(string relatedTypeName, string navigationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasMany(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasMany (relatedTypeName As String, Optional navigationName As String = null) As CollectionNavigationBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relatedTypeName" Type="System.String" />
        <Parameter Name="navigationName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relatedTypeName"> The name of the entity type that this relationship targets. </param>
        <param name="navigationName">
                The name of the collection navigation property on this entity type that represents the relationship. If
                no property is specified, the relationship will be configured without a navigation property on this
                end.
            </param>
        <summary>
          <para>
                    Configures a relationship where this entity type has a collection that contains
                    instances of the other type in the relationship.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder.WithOne(System.String)" />
                    to fully configure the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
        </summary>
        <returns> An object that can be used to configure the relationship. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasMany">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder HasMany (Type relatedType, string navigationName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder HasMany(class System.Type relatedType, string navigationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasMany(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasMany (relatedType As Type, Optional navigationName As String = null) As CollectionNavigationBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relatedType" Type="System.Type" />
        <Parameter Name="navigationName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relatedType"> The entity type that this relationship targets. </param>
        <param name="navigationName">
                The name of the collection navigation property on this entity type that represents the relationship. If
                no property is specified, the relationship will be configured without a navigation property on this
                end.
            </param>
        <summary>
          <para>
                    Configures a relationship where this entity type has a collection that contains
                    instances of the other type in the relationship.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder.WithOne(System.String)" />
                    to fully configure the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
        </summary>
        <returns> An object that can be used to configure the relationship. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasManyBuilder">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasManyBuilder (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType relatedEntityType, System.Reflection.PropertyInfo navigationProperty);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasManyBuilder(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType relatedEntityType, class System.Reflection.PropertyInfo navigationProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasManyBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Reflection.PropertyInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function HasManyBuilder (relatedEntityType As EntityType, navigationProperty As PropertyInfo) As InternalRelationshipBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relatedEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />
        <Parameter Name="navigationProperty" Type="System.Reflection.PropertyInfo" />
      </Parameters>
      <Docs>
        <param name="relatedEntityType"> The entity type that the relationship targets. </param>
        <param name="navigationProperty">
                The collection navigation property on this entity. If null is passed, then a relationship with no navigation
                property is created.
            </param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns> The newly created builder. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasManyBuilder">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasManyBuilder (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType relatedEntityType, string navigationName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasManyBuilder(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType relatedEntityType, string navigationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasManyBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function HasManyBuilder (relatedEntityType As EntityType, navigationName As String) As InternalRelationshipBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relatedEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />
        <Parameter Name="navigationName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relatedEntityType"> The entity type that the relationship targets. </param>
        <param name="navigationName">
                The name of the collection navigation property on this entity. If null is passed, then a relationship with no navigation
                property is created.
            </param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns> The newly created builder. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasOne">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder HasOne (string relatedTypeName, string navigationName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder HasOne(string relatedTypeName, string navigationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOne(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasOne (relatedTypeName As String, Optional navigationName As String = null) As ReferenceNavigationBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relatedTypeName" Type="System.String" />
        <Parameter Name="navigationName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relatedTypeName"> The name of the entity type that this relationship targets. </param>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship. If
                no property is specified, the relationship will be configured without a navigation property on this
                end.
            </param>
        <summary>
          <para>
                    Configures a relationship where this entity type has a reference that points
                    to a single instance of the other type in the relationship.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithMany(System.String)" />
                    or <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithOne(System.String)" /> to fully configure
                    the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
        </summary>
        <returns> An object that can be used to configure the relationship. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasOne">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder HasOne (Type relatedType, string navigationName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder HasOne(class System.Type relatedType, string navigationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOne(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasOne (relatedType As Type, Optional navigationName As String = null) As ReferenceNavigationBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relatedType" Type="System.Type" />
        <Parameter Name="navigationName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relatedType"> The entity type that this relationship targets. </param>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship. If
                no property is specified, the relationship will be configured without a navigation property on this
                end.
            </param>
        <summary>
          <para>
                    Configures a relationship where this entity type has a reference that points
                    to a single instance of the other type in the relationship.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithMany(System.String)" />
                    or <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithOne(System.String)" /> to fully configure
                    the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
        </summary>
        <returns> An object that can be used to configure the relationship. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasOneBuilder">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasOneBuilder (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType relatedEntityType, System.Reflection.PropertyInfo navigationProperty);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasOneBuilder(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType relatedEntityType, class System.Reflection.PropertyInfo navigationProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOneBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Reflection.PropertyInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function HasOneBuilder (relatedEntityType As EntityType, navigationProperty As PropertyInfo) As InternalRelationshipBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relatedEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />
        <Parameter Name="navigationProperty" Type="System.Reflection.PropertyInfo" />
      </Parameters>
      <Docs>
        <param name="relatedEntityType"> The entity type that the relationship targets. </param>
        <param name="navigationProperty">
                The reference navigation property on this entity. If null is passed, then a relationship with no navigation
                property is created.
            </param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns> The newly created builder. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasOneBuilder">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasOneBuilder (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType relatedEntityType, string navigationName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasOneBuilder(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType relatedEntityType, string navigationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOneBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function HasOneBuilder (relatedEntityType As EntityType, navigationName As String) As InternalRelationshipBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relatedEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />
        <Parameter Name="navigationName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relatedEntityType"> The entity type that the relationship targets. </param>
        <param name="navigationName">
                The name of the reference navigation property on this entity. If null is passed, then a relationship with no navigation
                property is created.
            </param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns> The newly created builder. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasQueryFilter">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder HasQueryFilter (System.Linq.Expressions.LambdaExpression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder HasQueryFilter(class System.Linq.Expressions.LambdaExpression filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasQueryFilter(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasQueryFilter (filter As LambdaExpression) As EntityTypeBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="filter">The LINQ predicate expression.</param>
        <summary>
                Specifies a LINQ predicate expression that will automatically be applied to any queries targeting
                this entity type.
            </summary>
        <returns> An object that can be used to configure the entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ignore">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder Ignore (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder Ignore(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Ignore(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Ignore (propertyName As String) As EntityTypeBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"> The name of then property to be removed from the entity type. </param>
        <summary>
                Excludes the given property from the entity type. This method is typically used to remove properties
                from the entity type that were added by convention.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Metadata">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType Metadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType Metadata" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Metadata" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Metadata As IMutableEntityType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The entity type being configured.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableModel&gt;.Instance">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IMutableModel Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableModel&gt;.Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IMutableModel Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableModel&gt;.Instance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure&lt;Microsoft#EntityFrameworkCore#Metadata#IMutableModel&gt;#Instance" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Instance As IMutableModel Implements IInfrastructure(Of IMutableModel).Instance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableModel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The model that the entity type belongs to.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&gt;.Instance">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&gt;.Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&gt;.Instance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure&lt;Microsoft#EntityFrameworkCore#Metadata#Internal#InternalEntityTypeBuilder&gt;#Instance" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Instance As InternalEntityTypeBuilder Implements IInfrastructure(Of InternalEntityTypeBuilder).Instance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the internal builder being used to configure the entity type.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder New (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder New(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.New(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function New (builder As InternalEntityTypeBuilder) As EntityTypeBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" />
      </Parameters>
      <Docs>
        <param name="builder"> The internal builder to create the new builder from. </param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns> The newly created builder. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsOne">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder OwnsOne (string ownedTypeName, string navigationName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder OwnsOne(string ownedTypeName, string navigationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.OwnsOne(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsOne (ownedTypeName As String, navigationName As String) As ReferenceOwnershipBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedTypeName" Type="System.String" />
        <Parameter Name="navigationName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ownedTypeName"> The name of the entity type that this relationship targets. </param>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
        <summary>
          <para>
                    Configures a relationship where the target entity is owned by (or part of) this entity.
                    The target entity key value is always propagated from the entity it belongs to.
                </para>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
        </summary>
        <returns> An object that can be used to configure the relationship. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsOne">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder OwnsOne (Type ownedType, string navigationName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder OwnsOne(class System.Type ownedType, string navigationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.OwnsOne(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsOne (ownedType As Type, navigationName As String) As ReferenceOwnershipBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedType" Type="System.Type" />
        <Parameter Name="navigationName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ownedType"> The entity type that this relationship targets. </param>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
        <summary>
          <para>
                    Configures a relationship where the target entity is owned by (or part of) this entity.
                    The target entity key value is always propagated from the entity it belongs to.
                </para>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
        </summary>
        <returns> An object that can be used to configure the relationship. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsOne">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder OwnsOne (string ownedTypeName, string navigationName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder OwnsOne(string ownedTypeName, string navigationName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.OwnsOne(System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsOne (ownedTypeName As String, navigationName As String, buildAction As Action(Of ReferenceOwnershipBuilder)) As EntityTypeBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedTypeName" Type="System.String" />
        <Parameter Name="navigationName" Type="System.String" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="ownedTypeName"> The name of the entity type that this relationship targets. </param>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
        <param name="buildAction"> An action that performs configuration of the relationship. </param>
        <summary>
          <para>
                    Configures a relationship where this entity type provides identity to
                    the other type in the relationship.
                </para>
        </summary>
        <returns> An object that can be used to configure the entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsOne">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder OwnsOne (Type ownedType, string navigationName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder OwnsOne(class System.Type ownedType, string navigationName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.OwnsOne(System.Type,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsOne (ownedType As Type, navigationName As String, buildAction As Action(Of ReferenceOwnershipBuilder)) As EntityTypeBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedType" Type="System.Type" />
        <Parameter Name="navigationName" Type="System.String" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="ownedType"> The entity type that this relationship targets. </param>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
        <param name="buildAction"> An action that performs configuration of the relationship. </param>
        <summary>
          <para>
                    Configures a relationship where this entity type provides identity to
                    the other type in the relationship.
                </para>
        </summary>
        <returns> An object that can be used to configure the entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder Property (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder Property(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Property(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Property (propertyName As String) As PropertyBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"> The name of the property to be configured. </param>
        <summary>
          <para>
                    Returns an object that can be used to configure a property of the entity type.
                    If no property with the given name exists, then a new property will be added.
                </para>
          <para>
                    When adding a new property with this overload the property name must match the
                    name of a CLR property or field on the entity type. This overload cannot be used to
                    add a new shadow state property.
                </para>
        </summary>
        <returns> An object that can be used to configure the property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder Property (Type propertyType, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder Property(class System.Type propertyType, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Property(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Property (propertyType As Type, propertyName As String) As PropertyBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyType"> The type of the property to be configured. </param>
        <param name="propertyName"> The name of the property to be configured. </param>
        <summary>
          <para>
                    Returns an object that can be used to configure a property of the entity type.
                    If no property with the given name exists, then a new property will be added.
                </para>
          <para>
                    When adding a new property, if a property with the same name exists in the entity class
                    then it will be added to the model. If no property exists in the entity class, then
                    a new shadow state property will be added. A shadow state property is one that does not have a
                    corresponding property in the entity class. The current value for the property is stored in
                    the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the entity class.
                </para>
        </summary>
        <returns> An object that can be used to configure the property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; Property&lt;TProperty&gt; (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; Property&lt;TProperty&gt;(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Property``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Property(Of TProperty) (propertyName As String) As PropertyBuilder(Of TProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty"> The type of the property to be configured. </typeparam>
        <param name="propertyName"> The name of the property to be configured. </param>
        <summary>
          <para>
                    Returns an object that can be used to configure a property of the entity type.
                    If no property with the given name exists, then a new property will be added.
                </para>
          <para>
                    When adding a new property, if a property with the same name exists in the entity class
                    then it will be added to the model. If no property exists in the entity class, then
                    a new shadow state property will be added. A shadow state property is one that does not have a
                    corresponding property in the entity class. The current value for the property is stored in
                    the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the entity class.
                </para>
        </summary>
        <returns> An object that can be used to configure the property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsePropertyAccessMode">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder UsePropertyAccessMode (Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode propertyAccessMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder UsePropertyAccessMode(valuetype Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode propertyAccessMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" /> to use for properties of this entity type. </param>
        <summary>
          <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" /> to use for all properties of this entity type.
                </para>
          <para>
                    By default, the backing field, if one is found by convention or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses.  Calling this method witll change that behavior
                    for all properties of this entity type as described in the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" /> enum.
                </para>
          <para>
                    Calling this method overrrides for all properties of this entity type any access mode that was
                    set on the model.
                </para>
        </summary>
        <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsePropertyAccessMode">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder UsePropertyAccessMode(valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="Microsoft.EntityFrameworkCore.PropertyAccessMode" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for properties of this entity type. </param>
        <summary>
          <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for all properties of this entity type.
                </para>
          <para>
                    By default, the backing field, if one is found by convention or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses.  Calling this method witll change that behavior
                    for all properties of this entity type as described in the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> enum.
                </para>
          <para>
                    Calling this method overrrides for all properties of this entity type any access mode that was
                    set on the model.
                </para>
        </summary>
        <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>