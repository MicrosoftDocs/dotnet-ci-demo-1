<Type Name="EventDefinition&lt;TParam&gt;" FullName="Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition&lt;TParam&gt;">
  <TypeSignature Language="C#" Value="public class EventDefinition&lt;TParam&gt; : Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventDefinition`1&lt;TParam&gt; extends Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`1" />
  <TypeSignature Language="VB.NET" Value="Public Class EventDefinition(Of TParam)&#xA;Inherits EventDefinitionBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TParam" />
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TParam">To be added.</typeparam>
    <summary>
                Defines metadata for an event with one parameter and a cached delegate to log the
                event with reduced allocations.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventDefinition (Microsoft.Extensions.Logging.EventId eventId, Microsoft.Extensions.Logging.LogLevel level, Action&lt;Microsoft.Extensions.Logging.ILogger,TParam,Exception&gt; logAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Microsoft.Extensions.Logging.EventId eventId, valuetype Microsoft.Extensions.Logging.LogLevel level, class System.Action`3&lt;class Microsoft.Extensions.Logging.ILogger, !TParam, class System.Exception&gt; logAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`1.#ctor(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.Action{Microsoft.Extensions.Logging.ILogger,`0,System.Exception})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventId" Type="Microsoft.Extensions.Logging.EventId" />
        <Parameter Name="level" Type="Microsoft.Extensions.Logging.LogLevel" />
        <Parameter Name="logAction" Type="System.Action&lt;Microsoft.Extensions.Logging.ILogger,TParam,System.Exception&gt;" />
      </Parameters>
      <Docs>
        <param name="eventId"> The <see cref="T:Microsoft.Extensions.Logging.EventId" />. </param>
        <param name="level"> The <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> at which the event will be logged. </param>
        <param name="logAction"> A cached delegate for logging the event. </param>
        <summary>
                Creates an event definition instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateMessage">
      <MemberSignature Language="C#" Value="public virtual string GenerateMessage (TParam arg, Exception exception = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GenerateMessage(!TParam arg, class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`1.GenerateMessage(`0,System.Exception)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="TParam" />
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="arg"> The message argument. </param>
        <param name="exception"> Optional exception associated with this event. </param>
        <summary>
                Generates the message that would be logged without logging it.
                Typically used for throwing an exception in warning-as-error cases.
            </summary>
        <returns> The message string. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log&lt;TLoggerCategory&gt;">
      <MemberSignature Language="C#" Value="public virtual void Log&lt;TLoggerCategory&gt; (Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;TLoggerCategory&gt; logger, TParam arg, Exception exception = null) where TLoggerCategory : Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;TLoggerCategory&gt;new();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Log&lt;.ctor (class Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory`1&lt;!!TLoggerCategory&gt;) TLoggerCategory&gt;(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;!!TLoggerCategory&gt; logger, !TParam arg, class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`1.Log``1(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{``0},`0,System.Exception)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLoggerCategory">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <BaseTypeName>Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;TLoggerCategory&gt;</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="logger" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;TLoggerCategory&gt;" />
        <Parameter Name="arg" Type="TParam" />
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <typeparam name="TLoggerCategory"> The <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory" />. </typeparam>
        <param name="logger"> The logger to which the event should be logged. </param>
        <param name="arg"> Message argument. </param>
        <param name="exception"> Optional exception associated with the event. </param>
        <summary>
                Logs the event, or throws if the event has been configured to be treated as an error.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>