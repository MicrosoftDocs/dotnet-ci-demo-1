<Type Name="CompiledAsyncEnumerableQuery&lt;TContext,TResult&gt;" FullName="Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncEnumerableQuery&lt;TContext,TResult&gt;">
  <TypeSignature Language="C#" Value="public class CompiledAsyncEnumerableQuery&lt;TContext,TResult&gt; : Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryBase&lt;TContext,Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt;&gt; where TContext : DbContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CompiledAsyncEnumerableQuery`2&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TResult&gt; extends Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryBase`2&lt;!TContext, valuetype Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1&lt;!TResult&gt;&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncEnumerableQuery`2" />
  <TypeSignature Language="VB.NET" Value="Public Class CompiledAsyncEnumerableQuery(Of TContext, TResult)&#xA;Inherits CompiledQueryBase(Of TContext, AsyncEnumerable(Of TResult))" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TContext">
      <Constraints>
        <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult" />
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryBase&lt;TContext,Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt;&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TContext">TContext</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="TResult">Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt;</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TContext">To be added.</typeparam>
    <typeparam name="TResult">To be added.</typeparam>
    <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompiledAsyncEnumerableQuery (System.Linq.Expressions.LambdaExpression queryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Linq.Expressions.LambdaExpression queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncEnumerableQuery`2.#ctor(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (queryExpression As LambdaExpression)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="queryExpression">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCompiledQuery">
      <MemberSignature Language="C#" Value="protected override Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt;&gt; CreateCompiledQuery (Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler queryCompiler, System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, valuetype Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1&lt;!TResult&gt;&gt; CreateCompiledQuery(class Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler queryCompiler, class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncEnumerableQuery`2.CreateCompiledQuery(Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryCompiler" Type="Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="queryCompiler">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt; Execute (TContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1&lt;!TResult&gt; Execute(!TContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncEnumerableQuery`2.Execute(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Execute (context As TContext) As AsyncEnumerable(Of TResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="TContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute&lt;TParam1&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt; Execute&lt;TParam1&gt; (TContext context, TParam1 param1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1&lt;!TResult&gt; Execute&lt;TParam1&gt;(!TContext context, !!TParam1 param1) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncEnumerableQuery`2.Execute``1(`0,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Execute(Of TParam1) (context As TContext, param1 As TParam1) As AsyncEnumerable(Of TResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TParam1" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="TContext" />
        <Parameter Name="param1" Type="TParam1" />
      </Parameters>
      <Docs>
        <typeparam name="TParam1">To be added.</typeparam>
        <param name="context">To be added.</param>
        <param name="param1">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute&lt;TParam1,TParam2&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt; Execute&lt;TParam1,TParam2&gt; (TContext context, TParam1 param1, TParam2 param2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1&lt;!TResult&gt; Execute&lt;TParam1, TParam2&gt;(!TContext context, !!TParam1 param1, !!TParam2 param2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncEnumerableQuery`2.Execute``2(`0,``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Execute(Of TParam1, TParam2) (context As TContext, param1 As TParam1, param2 As TParam2) As AsyncEnumerable(Of TResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="TContext" />
        <Parameter Name="param1" Type="TParam1" />
        <Parameter Name="param2" Type="TParam2" />
      </Parameters>
      <Docs>
        <typeparam name="TParam1">To be added.</typeparam>
        <typeparam name="TParam2">To be added.</typeparam>
        <param name="context">To be added.</param>
        <param name="param1">To be added.</param>
        <param name="param2">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute&lt;TParam1,TParam2,TParam3&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt; Execute&lt;TParam1,TParam2,TParam3&gt; (TContext context, TParam1 param1, TParam2 param2, TParam3 param3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1&lt;!TResult&gt; Execute&lt;TParam1, TParam2, TParam3&gt;(!TContext context, !!TParam1 param1, !!TParam2 param2, !!TParam3 param3) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncEnumerableQuery`2.Execute``3(`0,``0,``1,``2)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Execute(Of TParam1, TParam2, TParam3) (context As TContext, param1 As TParam1, param2 As TParam2, param3 As TParam3) As AsyncEnumerable(Of TResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
        <TypeParameter Name="TParam3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="TContext" />
        <Parameter Name="param1" Type="TParam1" />
        <Parameter Name="param2" Type="TParam2" />
        <Parameter Name="param3" Type="TParam3" />
      </Parameters>
      <Docs>
        <typeparam name="TParam1">To be added.</typeparam>
        <typeparam name="TParam2">To be added.</typeparam>
        <typeparam name="TParam3">To be added.</typeparam>
        <param name="context">To be added.</param>
        <param name="param1">To be added.</param>
        <param name="param2">To be added.</param>
        <param name="param3">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute&lt;TParam1,TParam2,TParam3,TParam4&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt; Execute&lt;TParam1,TParam2,TParam3,TParam4&gt; (TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1&lt;!TResult&gt; Execute&lt;TParam1, TParam2, TParam3, TParam4&gt;(!TContext context, !!TParam1 param1, !!TParam2 param2, !!TParam3 param3, !!TParam4 param4) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncEnumerableQuery`2.Execute``4(`0,``0,``1,``2,``3)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Execute(Of TParam1, TParam2, TParam3, TParam4) (context As TContext, param1 As TParam1, param2 As TParam2, param3 As TParam3, param4 As TParam4) As AsyncEnumerable(Of TResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
        <TypeParameter Name="TParam3" />
        <TypeParameter Name="TParam4" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="TContext" />
        <Parameter Name="param1" Type="TParam1" />
        <Parameter Name="param2" Type="TParam2" />
        <Parameter Name="param3" Type="TParam3" />
        <Parameter Name="param4" Type="TParam4" />
      </Parameters>
      <Docs>
        <typeparam name="TParam1">To be added.</typeparam>
        <typeparam name="TParam2">To be added.</typeparam>
        <typeparam name="TParam3">To be added.</typeparam>
        <typeparam name="TParam4">To be added.</typeparam>
        <param name="context">To be added.</param>
        <param name="param1">To be added.</param>
        <param name="param2">To be added.</param>
        <param name="param3">To be added.</param>
        <param name="param4">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute&lt;TParam1,TParam2,TParam3,TParam4,TParam5&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt; Execute&lt;TParam1,TParam2,TParam3,TParam4,TParam5&gt; (TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1&lt;!TResult&gt; Execute&lt;TParam1, TParam2, TParam3, TParam4, TParam5&gt;(!TContext context, !!TParam1 param1, !!TParam2 param2, !!TParam3 param3, !!TParam4 param4, !!TParam5 param5) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncEnumerableQuery`2.Execute``5(`0,``0,``1,``2,``3,``4)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Execute(Of TParam1, TParam2, TParam3, TParam4, TParam5) (context As TContext, param1 As TParam1, param2 As TParam2, param3 As TParam3, param4 As TParam4, param5 As TParam5) As AsyncEnumerable(Of TResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
        <TypeParameter Name="TParam3" />
        <TypeParameter Name="TParam4" />
        <TypeParameter Name="TParam5" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="TContext" />
        <Parameter Name="param1" Type="TParam1" />
        <Parameter Name="param2" Type="TParam2" />
        <Parameter Name="param3" Type="TParam3" />
        <Parameter Name="param4" Type="TParam4" />
        <Parameter Name="param5" Type="TParam5" />
      </Parameters>
      <Docs>
        <typeparam name="TParam1">To be added.</typeparam>
        <typeparam name="TParam2">To be added.</typeparam>
        <typeparam name="TParam3">To be added.</typeparam>
        <typeparam name="TParam4">To be added.</typeparam>
        <typeparam name="TParam5">To be added.</typeparam>
        <param name="context">To be added.</param>
        <param name="param1">To be added.</param>
        <param name="param2">To be added.</param>
        <param name="param3">To be added.</param>
        <param name="param4">To be added.</param>
        <param name="param5">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>