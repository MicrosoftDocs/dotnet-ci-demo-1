<Type Name="QueryCompiler" FullName="Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler">
  <TypeSignature Language="C#" Value="public class QueryCompiler : Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit QueryCompiler extends System.Object implements class Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler" />
  <TypeSignature Language="VB.NET" Value="Public Class QueryCompiler&#xA;Implements IQueryCompiler" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public QueryCompiler (Microsoft.EntityFrameworkCore.Query.IQueryContextFactory queryContextFactory, Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache compiledQueryCache, Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator compiledQueryCacheKeyGenerator, Microsoft.EntityFrameworkCore.Storage.IDatabase database, Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger&lt;Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler&gt; logger, Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry methodInfoBasedNodeTypeRegistry, Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext currentContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.IQueryContextFactory queryContextFactory, class Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache compiledQueryCache, class Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator compiledQueryCacheKeyGenerator, class Microsoft.EntityFrameworkCore.Storage.IDatabase database, class Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger`1&lt;class Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler&gt; logger, class Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry methodInfoBasedNodeTypeRegistry, class Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext currentContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.#ctor(Microsoft.EntityFrameworkCore.Query.IQueryContextFactory,Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache,Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator,Microsoft.EntityFrameworkCore.Storage.IDatabase,Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger{Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler},Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry,Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="queryContextFactory" Type="Microsoft.EntityFrameworkCore.Query.IQueryContextFactory" />
        <Parameter Name="compiledQueryCache" Type="Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache" />
        <Parameter Name="compiledQueryCacheKeyGenerator" Type="Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator" />
        <Parameter Name="database" Type="Microsoft.EntityFrameworkCore.Storage.IDatabase" />
        <Parameter Name="logger" Type="Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger&lt;Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler&gt;" />
        <Parameter Name="methodInfoBasedNodeTypeRegistry" Type="Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry" />
        <Parameter Name="currentContext" Type="Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext" />
      </Parameters>
      <Docs>
        <param name="queryContextFactory">To be added.</param>
        <param name="compiledQueryCache">To be added.</param>
        <param name="compiledQueryCacheKeyGenerator">To be added.</param>
        <param name="database">To be added.</param>
        <param name="logger">To be added.</param>
        <param name="methodInfoBasedNodeTypeRegistry">To be added.</param>
        <param name="currentContext">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public QueryCompiler (Microsoft.EntityFrameworkCore.Query.IQueryContextFactory queryContextFactory, Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache compiledQueryCache, Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator compiledQueryCacheKeyGenerator, Microsoft.EntityFrameworkCore.Storage.IDatabase database, Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; logger, Microsoft.EntityFrameworkCore.Query.Internal.INodeTypeProviderFactory nodeTypeProviderFactory, Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext currentContext, Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter evaluatableExpressionFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.IQueryContextFactory queryContextFactory, class Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache compiledQueryCache, class Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator compiledQueryCacheKeyGenerator, class Microsoft.EntityFrameworkCore.Storage.IDatabase database, class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Query&gt; logger, class Microsoft.EntityFrameworkCore.Query.Internal.INodeTypeProviderFactory nodeTypeProviderFactory, class Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext currentContext, class Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter evaluatableExpressionFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.#ctor(Microsoft.EntityFrameworkCore.Query.IQueryContextFactory,Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache,Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator,Microsoft.EntityFrameworkCore.Storage.IDatabase,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Microsoft.EntityFrameworkCore.Query.Internal.INodeTypeProviderFactory,Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext,Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (queryContextFactory As IQueryContextFactory, compiledQueryCache As ICompiledQueryCache, compiledQueryCacheKeyGenerator As ICompiledQueryCacheKeyGenerator, database As IDatabase, logger As IDiagnosticsLogger(Of DbLoggerCategory.Query), nodeTypeProviderFactory As INodeTypeProviderFactory, currentContext As ICurrentDbContext, evaluatableExpressionFilter As IEvaluatableExpressionFilter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="queryContextFactory" Type="Microsoft.EntityFrameworkCore.Query.IQueryContextFactory" />
        <Parameter Name="compiledQueryCache" Type="Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache" />
        <Parameter Name="compiledQueryCacheKeyGenerator" Type="Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator" />
        <Parameter Name="database" Type="Microsoft.EntityFrameworkCore.Storage.IDatabase" />
        <Parameter Name="logger" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Query&gt;" />
        <Parameter Name="nodeTypeProviderFactory" Type="Microsoft.EntityFrameworkCore.Query.Internal.INodeTypeProviderFactory" />
        <Parameter Name="currentContext" Type="Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext" />
        <Parameter Name="evaluatableExpressionFilter" Type="Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter" />
      </Parameters>
      <Docs>
        <param name="queryContextFactory">To be added.</param>
        <param name="compiledQueryCache">To be added.</param>
        <param name="compiledQueryCacheKeyGenerator">To be added.</param>
        <param name="database">To be added.</param>
        <param name="logger">To be added.</param>
        <param name="nodeTypeProviderFactory">To be added.</param>
        <param name="currentContext">To be added.</param>
        <param name="evaluatableExpressionFilter">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileAsyncQuery&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="protected virtual Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;&gt; CompileAsyncQuery&lt;TResult&gt; (System.Linq.Expressions.Expression query);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt;&gt; CompileAsyncQuery&lt;TResult&gt;(class System.Linq.Expressions.Expression query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileAsyncQuery``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CompileAsyncQuery(Of TResult) (query As Expression) As Func(Of QueryContext, IAsyncEnumerable(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="query">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileQuery&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="protected virtual Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,TResult&gt; CompileQuery&lt;TResult&gt; (System.Linq.Expressions.Expression query);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, !!TResult&gt; CompileQuery&lt;TResult&gt;(class System.Linq.Expressions.Expression query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQuery``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CompileQuery(Of TResult) (query As Expression) As Func(Of QueryContext, TResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="query">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCompiledAsyncEnumerableQuery&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;&gt; CreateCompiledAsyncEnumerableQuery&lt;TResult&gt; (System.Linq.Expressions.Expression query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt;&gt; CreateCompiledAsyncEnumerableQuery&lt;TResult&gt;(class System.Linq.Expressions.Expression query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CreateCompiledAsyncEnumerableQuery``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateCompiledAsyncEnumerableQuery(Of TResult) (query As Expression) As Func(Of QueryContext, IAsyncEnumerable(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="query">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCompiledAsyncTaskQuery&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Threading.Tasks.Task&lt;TResult&gt;&gt; CreateCompiledAsyncTaskQuery&lt;TResult&gt; (System.Linq.Expressions.Expression query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; CreateCompiledAsyncTaskQuery&lt;TResult&gt;(class System.Linq.Expressions.Expression query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CreateCompiledAsyncTaskQuery``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateCompiledAsyncTaskQuery(Of TResult) (query As Expression) As Func(Of QueryContext, Task(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Threading.Tasks.Task&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="query">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCompiledQuery&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,TResult&gt; CreateCompiledQuery&lt;TResult&gt; (System.Linq.Expressions.Expression query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, !!TResult&gt; CreateCompiledQuery&lt;TResult&gt;(class System.Linq.Expressions.Expression query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CreateCompiledQuery``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateCompiledQuery(Of TResult) (query As Expression) As Func(Of QueryContext, TResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="query">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Database">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Storage.IDatabase Database { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.IDatabase Database" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Database" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Database As IDatabase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.IDatabase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual TResult Execute&lt;TResult&gt; (System.Linq.Expressions.Expression query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TResult Execute&lt;TResult&gt;(class System.Linq.Expressions.Expression query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Execute(Of TResult) (query As Expression) As TResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="query">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; ExecuteAsync&lt;TResult&gt; (System.Linq.Expressions.Expression query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; ExecuteAsync&lt;TResult&gt;(class System.Linq.Expressions.Expression query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExecuteAsync(Of TResult) (query As Expression) As IAsyncEnumerable(Of TResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="query">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TResult&gt; ExecuteAsync&lt;TResult&gt; (System.Linq.Expressions.Expression query, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteAsync&lt;TResult&gt;(class System.Linq.Expressions.Expression query, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractParameters">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression ExtractParameters (System.Linq.Expressions.Expression query, Microsoft.EntityFrameworkCore.Query.QueryContext queryContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression ExtractParameters(class System.Linq.Expressions.Expression query, class Microsoft.EntityFrameworkCore.Query.QueryContext queryContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExtractParameters(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Query.QueryContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="queryContext" Type="Microsoft.EntityFrameworkCore.Query.QueryContext" />
      </Parameters>
      <Docs>
        <param name="query">To be added.</param>
        <param name="queryContext">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractParameters">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression ExtractParameters (System.Linq.Expressions.Expression query, Microsoft.EntityFrameworkCore.Query.QueryContext queryContext, bool parameterize = true);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression ExtractParameters(class System.Linq.Expressions.Expression query, class Microsoft.EntityFrameworkCore.Query.QueryContext queryContext, bool parameterize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExtractParameters(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Query.QueryContext,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="queryContext" Type="Microsoft.EntityFrameworkCore.Query.QueryContext" />
        <Parameter Name="parameterize" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="query">To be added.</param>
        <param name="queryContext">To be added.</param>
        <param name="parameterize">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>