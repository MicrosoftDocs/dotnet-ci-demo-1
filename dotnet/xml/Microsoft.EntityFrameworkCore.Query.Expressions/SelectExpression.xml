<Type Name="SelectExpression" FullName="Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression">
  <TypeSignature Language="C#" Value="public class SelectExpression : Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SelectExpression extends Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class SelectExpression&#xA;Inherits TableExpressionBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Represents a SQL SELECT expression.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SelectExpression (Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpressionDependencies dependencies, Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext queryCompilationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpressionDependencies dependencies, class Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext queryCompilationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.#ctor(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpressionDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As SelectExpressionDependencies, queryCompilationContext As RelationalQueryCompilationContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpressionDependencies" />
        <Parameter Name="queryCompilationContext" Type="Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext" />
      </Parameters>
      <Docs>
        <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        <param name="queryCompilationContext"> Context for the query compilation. </param>
        <summary>
                Creates a new instance of SelectExpression.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SelectExpression (Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory querySqlGeneratorFactory, Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext queryCompilationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory querySqlGeneratorFactory, class Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext queryCompilationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.#ctor(Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory,Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (querySqlGeneratorFactory As IQuerySqlGeneratorFactory, queryCompilationContext As RelationalQueryCompilationContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="querySqlGeneratorFactory" Type="Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory" />
        <Parameter Name="queryCompilationContext" Type="Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext" />
      </Parameters>
      <Docs>
        <param name="querySqlGeneratorFactory"> The query SQL generator factory. </param>
        <param name="queryCompilationContext"> Context for the query compilation. </param>
        <summary>
                Creates a new instance of SelectExpression.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SelectExpression (Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpressionDependencies dependencies, Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext queryCompilationContext, string alias);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpressionDependencies dependencies, class Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext queryCompilationContext, string alias) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.#ctor(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpressionDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As SelectExpressionDependencies, queryCompilationContext As RelationalQueryCompilationContext, alias As String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpressionDependencies" />
        <Parameter Name="queryCompilationContext" Type="Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext" />
        <Parameter Name="alias" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        <param name="queryCompilationContext"> Context for the query compilation. </param>
        <param name="alias"> The alias. </param>
        <summary>
                Creates a new instance of SelectExpression.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SelectExpression (Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory querySqlGeneratorFactory, Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext queryCompilationContext, string alias);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory querySqlGeneratorFactory, class Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext queryCompilationContext, string alias) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.#ctor(Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory,Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (querySqlGeneratorFactory As IQuerySqlGeneratorFactory, queryCompilationContext As RelationalQueryCompilationContext, alias As String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="querySqlGeneratorFactory" Type="Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory" />
        <Parameter Name="queryCompilationContext" Type="Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext" />
        <Parameter Name="alias" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="querySqlGeneratorFactory"> The query SQL generator factory. </param>
        <param name="queryCompilationContext"> Context for the query compilation. </param>
        <param name="alias"> The alias. </param>
        <summary>
                Creates a new instance of SelectExpression.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression Accept(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function Accept (visitor As ExpressionVisitor) As Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>
                Dispatches to the specific visit method for this node type.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAliasToProjection">
      <MemberSignature Language="C#" Value="public virtual int AddAliasToProjection (string alias, System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 AddAliasToProjection(string alias, class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.AddAliasToProjection(System.String,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alias" Type="System.String" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="alias"> The alias. </param>
        <param name="expression"> The expression. </param>
        <summary>
                Adds an expression with an alias to the projection.
            </summary>
        <returns>
                The corresponding index of the added expression in <see cref="P:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.Projection" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCrossJoin">
      <MemberSignature Language="C#" Value="public virtual void AddCrossJoin (Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase tableExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; projection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddCrossJoin(class Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase tableExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; projection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.AddCrossJoin(Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddCrossJoin (tableExpression As TableExpressionBase, projection As IEnumerable(Of Expression))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase" />
        <Parameter Name="projection" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="tableExpression"> The target table expression. </param>
        <param name="projection"> A sequence of expressions that should be added to the projection. </param>
        <summary>
                Adds a SQL CROSS JOIN to this SelectExpression.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCrossJoinLateral">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.Expressions.JoinExpressionBase AddCrossJoinLateral (Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase tableExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; projection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.Expressions.JoinExpressionBase AddCrossJoinLateral(class Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase tableExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; projection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.AddCrossJoinLateral(Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddCrossJoinLateral (tableExpression As TableExpressionBase, projection As IEnumerable(Of Expression)) As JoinExpressionBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.Expressions.JoinExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase" />
        <Parameter Name="projection" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="tableExpression"> The target table expression. </param>
        <param name="projection"> A sequence of expressions that should be added to the projection. </param>
        <summary>
                Adds a SQL CROSS JOIN LATERAL to this SelectExpression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddInnerJoin">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.Expressions.JoinExpressionBase AddInnerJoin (Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase tableExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.Expressions.JoinExpressionBase AddInnerJoin(class Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase tableExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.AddInnerJoin(Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddInnerJoin (tableExpression As TableExpressionBase) As JoinExpressionBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.Expressions.JoinExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase" />
      </Parameters>
      <Docs>
        <param name="tableExpression"> The target table expression. </param>
        <summary>
                Adds a SQL INNER JOIN to this SelectExpression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddInnerJoin">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.Expressions.JoinExpressionBase AddInnerJoin (Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase tableExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; projection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.Expressions.JoinExpressionBase AddInnerJoin(class Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase tableExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; projection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.AddInnerJoin(Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddInnerJoin (tableExpression As TableExpressionBase, projection As IEnumerable(Of Expression)) As JoinExpressionBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.Expressions.JoinExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase" />
        <Parameter Name="projection" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="tableExpression"> The target table expression. </param>
        <param name="projection"> A sequence of expressions that should be added to the projection. </param>
        <summary>
                Adds a SQL INNER JOIN to this SelectExpression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddInnerJoin">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.Expressions.PredicateJoinExpressionBase AddInnerJoin (Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase tableExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; projection, System.Linq.Expressions.Expression innerPredicate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.Expressions.PredicateJoinExpressionBase AddInnerJoin(class Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase tableExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; projection, class System.Linq.Expressions.Expression innerPredicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.AddInnerJoin(Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddInnerJoin (tableExpression As TableExpressionBase, projection As IEnumerable(Of Expression), innerPredicate As Expression) As PredicateJoinExpressionBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.Expressions.PredicateJoinExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase" />
        <Parameter Name="projection" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
        <Parameter Name="innerPredicate" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="tableExpression"> The target table expression. </param>
        <param name="projection"> A sequence of expressions that should be added to the projection. </param>
        <param name="innerPredicate">A predicate which should be appended to current predicate. </param>
        <summary>
                Adds a SQL INNER JOIN to this SelectExpression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLateralJoin">
      <MemberSignature Language="C#" Value="public virtual void AddLateralJoin (Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase tableExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; projection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddLateralJoin(class Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase tableExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; projection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.AddLateralJoin(Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddLateralJoin (tableExpression As TableExpressionBase, projection As IEnumerable(Of Expression))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase" />
        <Parameter Name="projection" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="tableExpression"> The target table expression. </param>
        <param name="projection"> A sequence of expressions that should be added to the projection. </param>
        <summary>
                Adds a SQL LATERAL JOIN to this SelectExpression.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLeftOuterJoin">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.Expressions.JoinExpressionBase AddLeftOuterJoin (Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase tableExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.Expressions.JoinExpressionBase AddLeftOuterJoin(class Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase tableExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.AddLeftOuterJoin(Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddLeftOuterJoin (tableExpression As TableExpressionBase) As JoinExpressionBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.Expressions.JoinExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase" />
      </Parameters>
      <Docs>
        <param name="tableExpression"> The target table expression. </param>
        <summary>
                Adds a SQL LEFT OUTER JOIN to this SelectExpression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLeftOuterJoin">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.Expressions.JoinExpressionBase AddLeftOuterJoin (Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase tableExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; projection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.Expressions.JoinExpressionBase AddLeftOuterJoin(class Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase tableExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; projection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.AddLeftOuterJoin(Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddLeftOuterJoin (tableExpression As TableExpressionBase, projection As IEnumerable(Of Expression)) As JoinExpressionBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.Expressions.JoinExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase" />
        <Parameter Name="projection" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="tableExpression"> The target table expression. </param>
        <param name="projection"> A sequence of expressions that should be added to the projection. </param>
        <summary>
                Adds a SQL LEFT OUTER JOIN to this SelectExpression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTable">
      <MemberSignature Language="C#" Value="public virtual void AddTable (Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase tableExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTable(class Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase tableExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.AddTable(Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddTable (tableExpression As TableExpressionBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase" />
      </Parameters>
      <Docs>
        <param name="tableExpression"> The table expression. </param>
        <summary>
                Adds a table to this SelectExpression.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTable">
      <MemberSignature Language="C#" Value="public virtual void AddTable (Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase tableExpression, bool createUniqueAlias = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTable(class Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase tableExpression, bool createUniqueAlias) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.AddTable(Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddTable (tableExpression As TableExpressionBase, Optional createUniqueAlias As Boolean = true)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase" />
        <Parameter Name="createUniqueAlias" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="tableExpression"> The table expression. </param>
        <param name="createUniqueAlias"> true to create unique alias. </param>
        <summary>
                Adds a table to this SelectExpression.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTables">
      <MemberSignature Language="C#" Value="public virtual void AddTables (System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase&gt; tableExpressions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTables(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase&gt; tableExpressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.AddTables(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddTables (tableExpressions As IEnumerable(Of TableExpressionBase))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableExpressions" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase&gt;" />
      </Parameters>
      <Docs>
        <param name="tableExpressions"> The table expressions. </param>
        <summary>
                Adds tables to this SelectExprssion.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToOrderBy">
      <MemberSignature Language="C#" Value="public virtual Remotion.Linq.Clauses.Ordering AddToOrderBy (Remotion.Linq.Clauses.Ordering ordering);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Remotion.Linq.Clauses.Ordering AddToOrderBy(class Remotion.Linq.Clauses.Ordering ordering) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.AddToOrderBy(Remotion.Linq.Clauses.Ordering)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Remotion.Linq.Clauses.Ordering</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordering" Type="Remotion.Linq.Clauses.Ordering" />
      </Parameters>
      <Docs>
        <param name="ordering"> The ordering. </param>
        <summary>
                Adds a single <see cref="T:Remotion.Linq.Clauses.Ordering" /> to the order by.
            </summary>
        <returns>
                The ordering added to select expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToOrderBy">
      <MemberSignature Language="C#" Value="public virtual void AddToOrderBy (System.Collections.Generic.IEnumerable&lt;Remotion.Linq.Clauses.Ordering&gt; orderings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToOrderBy(class System.Collections.Generic.IEnumerable`1&lt;class Remotion.Linq.Clauses.Ordering&gt; orderings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.AddToOrderBy(System.Collections.Generic.IEnumerable{Remotion.Linq.Clauses.Ordering})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToOrderBy (orderings As IEnumerable(Of Ordering))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orderings" Type="System.Collections.Generic.IEnumerable&lt;Remotion.Linq.Clauses.Ordering&gt;" />
      </Parameters>
      <Docs>
        <param name="orderings"> The orderings expressions. </param>
        <summary>
                Adds multiple expressions to the ORDER BY of this SelectExpression.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToOrderBy">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression AddToOrderBy (string column, Microsoft.EntityFrameworkCore.Metadata.IProperty property, Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase table, Remotion.Linq.Clauses.OrderingDirection orderingDirection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression AddToOrderBy(string column, class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase table, valuetype Remotion.Linq.Clauses.OrderingDirection orderingDirection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.AddToOrderBy(System.String,Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase,Remotion.Linq.Clauses.OrderingDirection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.String" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
        <Parameter Name="table" Type="Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase" />
        <Parameter Name="orderingDirection" Type="Remotion.Linq.Clauses.OrderingDirection" />
      </Parameters>
      <Docs>
        <param name="column"> The column name. </param>
        <param name="property"> The corresponding EF property. </param>
        <param name="table"> The target table. </param>
        <param name="orderingDirection"> The ordering direction. </param>
        <summary>
                Adds a column to the ORDER BY of this SelectExpression.
            </summary>
        <returns>
                An AliasExpression corresponding to the expression added to the ORDER BY.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToPredicate">
      <MemberSignature Language="C#" Value="public virtual void AddToPredicate (System.Linq.Expressions.Expression predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToPredicate(class System.Linq.Expressions.Expression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.AddToPredicate(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToPredicate (predicate As Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="predicate"> The predicate expression to add. </param>
        <summary>
                Adds a predicate expression to this SelectExpression, combining it with
                any existing predicate if necessary.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToProjection">
      <MemberSignature Language="C#" Value="public virtual int AddToProjection (Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression aliasExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 AddToProjection(class Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression aliasExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.AddToProjection(Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aliasExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression" />
      </Parameters>
      <Docs>
        <param name="aliasExpression"> The alias expression. </param>
        <summary>
                Adds an <see cref="T:Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression" /> to the projection.
            </summary>
        <returns>
                The corresponding index of the added expression in <see cref="P:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.Projection" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToProjection">
      <MemberSignature Language="C#" Value="public virtual int AddToProjection (Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression columnExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 AddToProjection(class Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression columnExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.AddToProjection(Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression" />
      </Parameters>
      <Docs>
        <param name="columnExpression"> The column expression. </param>
        <summary>
                Adds a ColumnExpression to the projection.
            </summary>
        <returns>
                The corresponding index of the added expression in <see cref="P:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.Projection" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToProjection">
      <MemberSignature Language="C#" Value="public virtual int AddToProjection (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 AddToProjection(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.AddToProjection(System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"> The expression. </param>
        <summary>
                Adds an expression to the projection.
            </summary>
        <returns>
                The corresponding index of the added expression in <see cref="P:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.Projection" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToProjection">
      <MemberSignature Language="C#" Value="public virtual int AddToProjection (Microsoft.EntityFrameworkCore.Metadata.IProperty property, Remotion.Linq.Clauses.IQuerySource querySource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 AddToProjection(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class Remotion.Linq.Clauses.IQuerySource querySource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.AddToProjection(Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddToProjection (property As IProperty, querySource As IQuerySource) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
        <Parameter Name="querySource" Type="Remotion.Linq.Clauses.IQuerySource" />
      </Parameters>
      <Docs>
        <param name="property"> The corresponding EF property. </param>
        <param name="querySource"> The originating query source. </param>
        <summary>
                Adds a column to the projection.
            </summary>
        <returns>
                The corresponding index of the added expression in <see cref="P:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.Projection" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToProjection">
      <MemberSignature Language="C#" Value="public virtual int AddToProjection (System.Linq.Expressions.Expression expression, bool resetProjectStar = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 AddToProjection(class System.Linq.Expressions.Expression expression, bool resetProjectStar) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.AddToProjection(System.Linq.Expressions.Expression,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="resetProjectStar" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="expression"> The expression. </param>
        <param name="resetProjectStar"> true to reset the value of <see cref="P:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.IsProjectStar" />. </param>
        <summary>
                Adds an expression to the projection.
            </summary>
        <returns>
                The corresponding index of the added expression in <see cref="P:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.Projection" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToProjection">
      <MemberSignature Language="C#" Value="public virtual int AddToProjection (string column, Microsoft.EntityFrameworkCore.Metadata.IProperty property, Remotion.Linq.Clauses.IQuerySource querySource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 AddToProjection(string column, class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class Remotion.Linq.Clauses.IQuerySource querySource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.AddToProjection(System.String,Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddToProjection (column As String, property As IProperty, querySource As IQuerySource) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.String" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
        <Parameter Name="querySource" Type="Remotion.Linq.Clauses.IQuerySource" />
      </Parameters>
      <Docs>
        <param name="column"> The column name. </param>
        <param name="property"> The corresponding EF property. </param>
        <param name="querySource"> The originating query source. </param>
        <summary>
                Adds a column to the projection.
            </summary>
        <returns>
                The corresponding index of the added expression in <see cref="P:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.Projection" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindProperty">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression BindProperty (Microsoft.EntityFrameworkCore.Metadata.IProperty property, Remotion.Linq.Clauses.IQuerySource querySource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression BindProperty(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class Remotion.Linq.Clauses.IQuerySource querySource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.BindProperty(Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BindProperty (property As IProperty, querySource As IQuerySource) As Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
        <Parameter Name="querySource" Type="Remotion.Linq.Clauses.IQuerySource" />
      </Parameters>
      <Docs>
        <param name="property"> The corresponding EF property. </param>
        <param name="querySource"> The originating query source. </param>
        <summary>
                Generates an expression bound to this select expression for the supplied property.
            </summary>
        <returns>
                The bound expression which can be used to refer column from this select expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindSubqueryProjectionIndex">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression BindSubqueryProjectionIndex (int projectionIndex, Remotion.Linq.Clauses.IQuerySource querySource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression BindSubqueryProjectionIndex(int32 projectionIndex, class Remotion.Linq.Clauses.IQuerySource querySource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.BindSubqueryProjectionIndex(System.Int32,Remotion.Linq.Clauses.IQuerySource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BindSubqueryProjectionIndex (projectionIndex As Integer, querySource As IQuerySource) As Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectionIndex" Type="System.Int32" />
        <Parameter Name="querySource" Type="Remotion.Linq.Clauses.IQuerySource" />
      </Parameters>
      <Docs>
        <param name="projectionIndex"> The index of projected expression in subquery. </param>
        <param name="querySource"> The originating query source. </param>
        <summary>
                Computes the bound expression corresponding to the supplied index and query source.
            </summary>
        <returns>
                The projected expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Clears all elements of this SelectExpression.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearColumnProjections">
      <MemberSignature Language="C#" Value="public virtual void ClearColumnProjections ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearColumnProjections() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.ClearColumnProjections" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ClearColumnProjections ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Clears the column expressions from the projection.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearOrderBy">
      <MemberSignature Language="C#" Value="public virtual void ClearOrderBy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearOrderBy() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.ClearOrderBy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ClearOrderBy ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Clears the ORDER BY of this SelectExpression.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearProjection">
      <MemberSignature Language="C#" Value="public virtual void ClearProjection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearProjection() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.ClearProjection" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ClearProjection ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Clears the projection.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearTables">
      <MemberSignature Language="C#" Value="public virtual void ClearTables ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearTables() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.ClearTables" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ClearTables ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Removes any tables added to this SelectExpression.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression Clone (string alias = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression Clone(string alias) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.Clone(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone (Optional alias As String = null) As SelectExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alias" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="alias"> The alias. </param>
        <summary>
                Makes a copy of this SelectExpression.
            </summary>
        <returns>
                A copy of this SelectExpression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDefaultQuerySqlGenerator">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator CreateDefaultQuerySqlGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator CreateDefaultQuerySqlGenerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.CreateDefaultQuerySqlGenerator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDefaultQuerySqlGenerator () As IQuerySqlGenerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Creates the default query SQL generator.
            </summary>
        <returns>
                The new default query SQL generator.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromSqlQuerySqlGenerator">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator CreateFromSqlQuerySqlGenerator (string sql, System.Linq.Expressions.Expression arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator CreateFromSqlQuerySqlGenerator(string sql, class System.Linq.Expressions.Expression arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.CreateFromSqlQuerySqlGenerator(System.String,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateFromSqlQuerySqlGenerator (sql As String, arguments As Expression) As IQuerySqlGenerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sql" Type="System.String" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="sql"> The SQL. </param>
        <param name="arguments"> The arguments. </param>
        <summary>
                Creates the FromSql query SQL generator.
            </summary>
        <returns>
                The new FromSql query SQL generator.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dependencies">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpressionDependencies Dependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpressionDependencies Dependencies" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.Dependencies" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Dependencies As SelectExpressionDependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpressionDependencies</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Dependencies used to create a <see cref="T:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression" /></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExplodeStarProjection">
      <MemberSignature Language="C#" Value="public virtual void ExplodeStarProjection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExplodeStarProjection() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.ExplodeStarProjection" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ExplodeStarProjection ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Transforms the projection of this SelectExpression by expanding the wildcard ('*') projection
                into individual explicit projection expressions.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProjectionForMemberInfo">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression GetProjectionForMemberInfo (System.Reflection.MemberInfo memberInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetProjectionForMemberInfo(class System.Reflection.MemberInfo memberInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.GetProjectionForMemberInfo(System.Reflection.MemberInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="memberInfo"> The corresponding member info. </param>
        <summary>
                Gets the projection corresponding to supplied member info.
            </summary>
        <returns>
                The projection.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProjectionIndex">
      <MemberSignature Language="C#" Value="public virtual int GetProjectionIndex (Microsoft.EntityFrameworkCore.Metadata.IProperty property, Remotion.Linq.Clauses.IQuerySource querySource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetProjectionIndex(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class Remotion.Linq.Clauses.IQuerySource querySource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.GetProjectionIndex(Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetProjectionIndex (property As IProperty, querySource As IQuerySource) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
        <Parameter Name="querySource" Type="Remotion.Linq.Clauses.IQuerySource" />
      </Parameters>
      <Docs>
        <param name="property"> The corresponding EF property. </param>
        <param name="querySource"> The originating query source. </param>
        <summary>
                Computes the index in <see cref="P:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.Projection" /> corresponding to the supplied property and query source.
            </summary>
        <returns>
                The projection index.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProjectionTypes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Type&gt; GetProjectionTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; GetProjectionTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.GetProjectionTypes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetProjectionTypes () As IEnumerable(Of Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the types of the expressions in <see cref="P:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.Projection" />.
            </summary>
        <returns>
                The types of the expressions in <see cref="P:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.Projection" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTableForQuerySource">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase GetTableForQuerySource (Remotion.Linq.Clauses.IQuerySource querySource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase GetTableForQuerySource(class Remotion.Linq.Clauses.IQuerySource querySource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.GetTableForQuerySource(Remotion.Linq.Clauses.IQuerySource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTableForQuerySource (querySource As IQuerySource) As TableExpressionBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="querySource" Type="Remotion.Linq.Clauses.IQuerySource" />
      </Parameters>
      <Docs>
        <param name="querySource"> The query source. </param>
        <summary>
                Gets the table corresponding to the supplied query source.
            </summary>
        <returns>
                The table for query source.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandlesQuerySource">
      <MemberSignature Language="C#" Value="public override bool HandlesQuerySource (Remotion.Linq.Clauses.IQuerySource querySource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool HandlesQuerySource(class Remotion.Linq.Clauses.IQuerySource querySource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.HandlesQuerySource(Remotion.Linq.Clauses.IQuerySource)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function HandlesQuerySource (querySource As IQuerySource) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="querySource" Type="Remotion.Linq.Clauses.IQuerySource" />
      </Parameters>
      <Docs>
        <param name="querySource"> The query source. </param>
        <summary>
                Determines whether or not this SelectExpression handles the given query source.
            </summary>
        <returns>
                true if the supplied query source is handled by this SelectExpression; otherwise false.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCorrelated">
      <MemberSignature Language="C#" Value="public virtual bool IsCorrelated ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsCorrelated() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.IsCorrelated" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsCorrelated () As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Determines if this SelectExpression contains any correlated subqueries.
            </summary>
        <returns>
                true if correlated, false if not.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDistinct">
      <MemberSignature Language="C#" Value="public virtual bool IsDistinct { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDistinct" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.IsDistinct" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property IsDistinct As Boolean" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets or sets a value indicating whether this SelectExpression is DISTINCT.
            </summary>
        <value>
                true if this SelectExpression is distinct, false if not.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIdentityQuery">
      <MemberSignature Language="C#" Value="public virtual bool IsIdentityQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsIdentityQuery() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.IsIdentityQuery" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsIdentityQuery () As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Determines whether this SelectExpression is an identity query. An identity query
                has a single table, and returns all of the rows from that table, unmodified.
            </summary>
        <returns>
                true if this SelectExpression is an identity query, false if not.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsProjectStar">
      <MemberSignature Language="C#" Value="public virtual bool IsProjectStar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsProjectStar" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.IsProjectStar" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property IsProjectStar As Boolean" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets or sets a value indicating whether this expression projects a single wildcard ('*').
            </summary>
        <value>
                true if this SelectExpression is project star, false if not.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LiftOrderBy">
      <MemberSignature Language="C#" Value="public virtual void LiftOrderBy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LiftOrderBy() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.LiftOrderBy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LiftOrderBy ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Ensure that order by expressions from Project Star table of this select expression
                are copied on outer level to preserve ordering.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Limit">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression Limit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression Limit" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.Limit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Limit As Expression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets or sets the LIMIT of this SelectExpression.
            </summary>
        <value>
                The limit.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression Offset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression Offset" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.Offset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Offset As Expression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets or sets the OFFSET of this SelectExpression.
            </summary>
        <value>
                The offset.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Remotion.Linq.Clauses.Ordering&gt; OrderBy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;class Remotion.Linq.Clauses.Ordering&gt; OrderBy" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.OrderBy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OrderBy As IReadOnlyList(Of Ordering)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Remotion.Linq.Clauses.Ordering&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The SQL ORDER BY of this SelectExpression.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Predicate">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression Predicate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression Predicate" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.Predicate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Predicate As Expression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets or sets the predicate corresponding to the WHERE part of the SELECT expression.
            </summary>
        <value>
                The predicate.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrependToOrderBy">
      <MemberSignature Language="C#" Value="public virtual void PrependToOrderBy (System.Collections.Generic.IEnumerable&lt;Remotion.Linq.Clauses.Ordering&gt; orderings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrependToOrderBy(class System.Collections.Generic.IEnumerable`1&lt;class Remotion.Linq.Clauses.Ordering&gt; orderings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.PrependToOrderBy(System.Collections.Generic.IEnumerable{Remotion.Linq.Clauses.Ordering})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub PrependToOrderBy (orderings As IEnumerable(Of Ordering))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orderings" Type="System.Collections.Generic.IEnumerable&lt;Remotion.Linq.Clauses.Ordering&gt;" />
      </Parameters>
      <Docs>
        <param name="orderings"> The orderings expressions. </param>
        <summary>
                Prepends multiple ordering expressions to the ORDER BY of this SelectExpression.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Projection">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt; Projection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;class System.Linq.Expressions.Expression&gt; Projection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.Projection" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Projection As IReadOnlyList(Of Expression)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The projection of this SelectExpression.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProjectStarAlias">
      <MemberSignature Language="C#" Value="public virtual string ProjectStarAlias { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProjectStarAlias" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.ProjectStarAlias" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ProjectStarAlias As String" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets or sets the table alias to be used for star projection.
            </summary>
        <value>
                The table alias.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProjectStarTable">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase ProjectStarTable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase ProjectStarTable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.ProjectStarTable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ProjectStarTable As TableExpressionBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets or sets the table to be used for star projection.
            </summary>
        <value>
                The table.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PushDownSubquery">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression PushDownSubquery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression PushDownSubquery() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.PushDownSubquery" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PushDownSubquery () As SelectExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Creates a subquery based on this SelectExpression and makes that table the single entry in
                <see cref="P:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.Tables" />. Clears all other top-level aspects of this SelectExpression.
            </summary>
        <returns>
                A SelectExpression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromProjection">
      <MemberSignature Language="C#" Value="public virtual void RemoveFromProjection (System.Collections.Generic.IEnumerable&lt;Remotion.Linq.Clauses.Ordering&gt; orderBy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveFromProjection(class System.Collections.Generic.IEnumerable`1&lt;class Remotion.Linq.Clauses.Ordering&gt; orderBy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.RemoveFromProjection(System.Collections.Generic.IEnumerable{Remotion.Linq.Clauses.Ordering})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveFromProjection (orderBy As IEnumerable(Of Ordering))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orderBy" Type="System.Collections.Generic.IEnumerable&lt;Remotion.Linq.Clauses.Ordering&gt;" />
      </Parameters>
      <Docs>
        <param name="orderBy"> The Orderings to remove from the projection. </param>
        <summary>
                Removes expressions from the projection corresponding to the
                supplied <see cref="T:Remotion.Linq.Clauses.Ordering" /> expressions.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRangeFromProjection">
      <MemberSignature Language="C#" Value="public virtual void RemoveRangeFromProjection (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRangeFromProjection(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.RemoveRangeFromProjection(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRangeFromProjection (index As Integer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"> Zero-based index of the start of the range to remove. </param>
        <summary>
                Removes a range from the projection.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTable">
      <MemberSignature Language="C#" Value="public virtual void RemoveTable (Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase tableExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveTable(class Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase tableExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.RemoveTable(Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveTable (tableExpression As TableExpressionBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase" />
      </Parameters>
      <Docs>
        <param name="tableExpression"> The table expression. </param>
        <summary>
                Removes a table from this SelectExpression.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceOrderBy">
      <MemberSignature Language="C#" Value="public virtual void ReplaceOrderBy (System.Collections.Generic.IEnumerable&lt;Remotion.Linq.Clauses.Ordering&gt; orderings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReplaceOrderBy(class System.Collections.Generic.IEnumerable`1&lt;class Remotion.Linq.Clauses.Ordering&gt; orderings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.ReplaceOrderBy(System.Collections.Generic.IEnumerable{Remotion.Linq.Clauses.Ordering})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReplaceOrderBy (orderings As IEnumerable(Of Ordering))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orderings" Type="System.Collections.Generic.IEnumerable&lt;Remotion.Linq.Clauses.Ordering&gt;" />
      </Parameters>
      <Docs>
        <param name="orderings"> The orderings expressions. </param>
        <summary>
                TODO
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceProjection">
      <MemberSignature Language="C#" Value="public virtual void ReplaceProjection (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReplaceProjection(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.ReplaceProjection(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReplaceProjection (expressions As IEnumerable(Of Expression))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="expressions">The new projection expressions.</param>
        <summary>
                Replace the projection expressions in this SelectExpression.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetProjectionConditionalExpression">
      <MemberSignature Language="C#" Value="public virtual void SetProjectionConditionalExpression (System.Linq.Expressions.ConditionalExpression conditionalExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetProjectionConditionalExpression(class System.Linq.Expressions.ConditionalExpression conditionalExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.SetProjectionConditionalExpression(System.Linq.Expressions.ConditionalExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditionalExpression" Type="System.Linq.Expressions.ConditionalExpression" />
      </Parameters>
      <Docs>
        <param name="conditionalExpression"> The conditional expression. </param>
        <summary>
                Sets a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> as the single projected expression
                in this SelectExpression.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetProjectionExpression">
      <MemberSignature Language="C#" Value="public virtual void SetProjectionExpression (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetProjectionExpression(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.SetProjectionExpression(System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"> The expression. </param>
        <summary>
                Sets an expression as the single projected expression in this SelectExpression.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetProjectionForMemberInfo">
      <MemberSignature Language="C#" Value="public virtual void SetProjectionForMemberInfo (System.Reflection.MemberInfo memberInfo, System.Linq.Expressions.Expression projection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetProjectionForMemberInfo(class System.Reflection.MemberInfo memberInfo, class System.Linq.Expressions.Expression projection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.SetProjectionForMemberInfo(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" />
        <Parameter Name="projection" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="memberInfo"> The member info. </param>
        <param name="projection"> The corresponding projection. </param>
        <summary>
                Sets the supplied expression as the projection for the supplied member info.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tables">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase&gt; Tables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase&gt; Tables" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.Tables" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Tables As IReadOnlyList(Of TableExpressionBase)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The tables making up the FROM part of the SELECT expression.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Convert this object into a string representation.
            </summary>
        <returns>
                A string that represents this object.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public override Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.Type" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Type As Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Type of this expression.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateColumnExpression">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression UpdateColumnExpression (System.Linq.Expressions.Expression expression, Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase tableExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression UpdateColumnExpression(class System.Linq.Expressions.Expression expression, class Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase tableExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.UpdateColumnExpression(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tableExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.TableExpressionBase" />
      </Parameters>
      <Docs>
        <param name="expression"> The target expression. </param>
        <param name="tableExpression"> The new table expression. </param>
        <summary>
                Updates the table expression of any column expressions in the target expression.
            </summary>
        <returns>
                An updated expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitChildren">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitChildren (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitChildren(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitChildren (visitor As ExpressionVisitor) As Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor"> An instance of <see cref="T:System.Linq.Expressions.ExpressionVisitor" />. </param>
        <summary>
                Reduces the node and then calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)" /> method passing the
                reduced expression.
                Throws an exception if the node isn't reducible.
            </summary>
        <returns> The expression being visited, or an expression which should replace it in the tree. </returns>
        <remarks>
                Override this method to provide logic to walk the node's children.
                A typical implementation will call visitor.Visit on each of its
                children, and if any of them change, should return a new copy of
                itself with the modified children.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>