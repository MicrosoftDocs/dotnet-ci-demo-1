<Type Name="InMemoryServiceCollectionExtensions" FullName="Microsoft.Extensions.DependencyInjection.InMemoryServiceCollectionExtensions">
  <TypeSignature Language="C#" Value="public static class InMemoryServiceCollectionExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit InMemoryServiceCollectionExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.DependencyInjection.InMemoryServiceCollectionExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module InMemoryServiceCollectionExtensions" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                In-memory specific extension methods for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddEntityFrameworkInMemoryDatabase">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddEntityFrameworkInMemoryDatabase (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddEntityFrameworkInMemoryDatabase(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.InMemoryServiceCollectionExtensions.AddEntityFrameworkInMemoryDatabase(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddEntityFrameworkInMemoryDatabase (serviceCollection As IServiceCollection) As IServiceCollection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
      </Parameters>
      <Docs>
        <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
        <summary>
          <para>
                    Adds the services required by the in-memory database provider for Entity Framework
                    to an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />. You use this method when using dependency injection
                    in your application, such as with ASP.NET. For more information on setting up dependency
                    injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
                </para>
          <para>
                    You only need to use this functionality when you want Entity Framework to resolve the services it uses
                    from an external dependency injection container. If you are not using an external
                    dependency injection container, Entity Framework will take care of creating the services it requires.
                </para>
        </summary>
        <returns>
                The same service collection so that multiple calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
        <example>
          <code>
                    public void ConfigureServices(IServiceCollection services)
                    {
                        services
                            .AddEntityFrameworkInMemoryDatabase()
                            .AddDbContext&lt;MyContext&gt;((serviceProvider, options) =&gt;
                                options.UseInMemoryDatabase()
                                       .UseInternalServiceProvider(serviceProvider));
                    }
                </code>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>