<Type Name="EntityFrameworkServiceCollectionExtensions" FullName="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions">
  <TypeSignature Language="C#" Value="public static class EntityFrameworkServiceCollectionExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EntityFrameworkServiceCollectionExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module EntityFrameworkServiceCollectionExtensions" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Extension methods for setting up Entity Framework related services in an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddDbContext&lt;TContext&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContext(Of TContext As DbContext) (serviceCollection As IServiceCollection, contextLifetime As ServiceLifetime) As IServiceCollection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="contextLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
      </Parameters>
      <Docs>
        <typeparam name="TContext"> The type of context to be registered. </typeparam>
        <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
        <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
        <summary>
                Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                You use this method when using dependency injection in your application, such as with ASP.NET.
                For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
            </summary>
        <returns>
                The same service collection so that multiple calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
        <example>
          <code>
                    public void ConfigureServices(IServiceCollection services) 
                    {
                        var connectionString = "connection string to database";
            
                        services.AddDbContext&lt;MyContext&gt;(ServiceLifetime.Scoped); 
                    }
                </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="AddDbContext&lt;TContext&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime, Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContext(Of TContext As DbContext) (serviceCollection As IServiceCollection, contextLifetime As ServiceLifetime, Optional optionsLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) As IServiceCollection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="contextLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
        <Parameter Name="optionsLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
      </Parameters>
      <Docs>
        <typeparam name="TContext"> The type of context to be registered. </typeparam>
        <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
        <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
        <param name="optionsLifetime"> The lifetime with which to register the DbContextOptions service in the container. </param>
        <summary>
                Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                You use this method when using dependency injection in your application, such as with ASP.NET.
                For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
            </summary>
        <returns>
                The same service collection so that multiple calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
        <example>
          <code>
                     public void ConfigureServices(IServiceCollection services)
                     {
                         var connectionString = "connection string to database";
            
                         services.AddDbContext&lt;MyContext&gt;(ServiceLifetime.Scoped);
                     }
                 </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="AddDbContext&lt;TContext&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction = null, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContext(Of TContext As DbContext) (serviceCollection As IServiceCollection, Optional optionsAction As Action(Of DbContextOptionsBuilder) = null, Optional contextLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) As IServiceCollection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="optionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" />
        <Parameter Name="contextLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
      </Parameters>
      <Docs>
        <typeparam name="TContext"> The type of context to be registered. </typeparam>
        <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
        <param name="optionsAction">
          <para>
                    An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. This provides an
                    alternative to performing configuration of the context by overriding the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context.
                </para>
          <para>
                    If an action is supplied here, the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be run if it has
                    been overridden on the derived context. <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> configuration will be applied
                    in addition to configuration performed here.
                </para>
          <para>
                    In order for the options to be passed into your context, you need to expose a constructor on your context that takes
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> and passes it to the base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
        </param>
        <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
        <summary>
                Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                You use this method when using dependency injection in your application, such as with ASP.NET.
                For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
            </summary>
        <returns>
                The same service collection so that multiple calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
        <example>
          <code>
                    public void ConfigureServices(IServiceCollection services) 
                    {
                        var connectionString = "connection string to database";
            
                        services.AddDbContext&lt;MyContext&gt;(options =&gt; options.UseSqlServer(connectionString)); 
                    }
                </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="AddDbContext&lt;TContext&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`2&lt;class System.IServiceProvider, class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContext(Of TContext As DbContext) (serviceCollection As IServiceCollection, optionsAction As Action(Of IServiceProvider, DbContextOptionsBuilder), Optional contextLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) As IServiceCollection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="optionsAction" Type="System.Action&lt;System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" />
        <Parameter Name="contextLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
      </Parameters>
      <Docs>
        <typeparam name="TContext"> The type of context to be registered. </typeparam>
        <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
        <param name="optionsAction">
          <para>
                    An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. This provides an
                    alternative to performing configuration of the context by overriding the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context.
                </para>
          <para>
                    If an action is supplied here, the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be run if it has
                    been overridden on the derived context. <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> configuration will be applied
                    in addition to configuration performed here.
                </para>
          <para>
                    In order for the options to be passed into your context, you need to expose a constructor on your context that takes
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> and passes it to the base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
        </param>
        <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
        <summary>
          <para>
                    Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                    You use this method when using dependency injection in your application, such as with ASP.NET.
                    For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
                </para>
          <para>
                    This overload has an <paramref name="optionsAction" /> that provides the applications <see cref="T:System.IServiceProvider" />.
                    This is useful if you want to setup Entity Framework to resolve its internal services from the primary application service
                    provider.
                    By default, we recommend using the other overload, which allows Entity Framework to create and maintain its own
                    <see cref="T:System.IServiceProvider" />
                    for internal Entity Framework services.
                </para>
        </summary>
        <returns>
                The same service collection so that multiple calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
        <example>
          <code>
                    public void ConfigureServices(IServiceCollection services) 
                    {
                        var connectionString = "connection string to database";
            
                        services
                            .AddEntityFrameworkSqlServer()
                            .AddDbContext&lt;MyContext&gt;((serviceProvider, options) =&gt; 
                                options.UseSqlServer(connectionString)
                                       .UseInternalServiceProvider(serviceProvider)); 
                    }
                </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="AddDbContext&lt;TContext&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction = null, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped, Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContext(Of TContext As DbContext) (serviceCollection As IServiceCollection, Optional optionsAction As Action(Of DbContextOptionsBuilder) = null, Optional contextLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped, Optional optionsLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) As IServiceCollection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="optionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" />
        <Parameter Name="contextLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
        <Parameter Name="optionsLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
      </Parameters>
      <Docs>
        <typeparam name="TContext"> The type of context to be registered. </typeparam>
        <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
        <param name="optionsAction">
          <para>
                    An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. This provides an
                    alternative to performing configuration of the context by overriding the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context.
                </para>
          <para>
                    If an action is supplied here, the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be run if it has
                    been overridden on the derived context. <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> configuration will be applied
                    in addition to configuration performed here.
                </para>
          <para>
                    In order for the options to be passed into your context, you need to expose a constructor on your context that takes
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> and passes it to the base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
        </param>
        <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
        <param name="optionsLifetime"> The lifetime with which to register the DbContextOptions service in the container. </param>
        <summary>
                Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                You use this method when using dependency injection in your application, such as with ASP.NET.
                For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
            </summary>
        <returns>
                The same service collection so that multiple calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
        <example>
          <code>
                     public void ConfigureServices(IServiceCollection services)
                     {
                         var connectionString = "connection string to database";
            
                         services.AddDbContext&lt;MyContext&gt;(options =&gt; options.UseSqlServer(connectionString));
                     }
                 </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="AddDbContext&lt;TContext&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped, Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`2&lt;class System.IServiceProvider, class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContext(Of TContext As DbContext) (serviceCollection As IServiceCollection, optionsAction As Action(Of IServiceProvider, DbContextOptionsBuilder), Optional contextLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped, Optional optionsLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) As IServiceCollection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="optionsAction" Type="System.Action&lt;System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" />
        <Parameter Name="contextLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
        <Parameter Name="optionsLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
      </Parameters>
      <Docs>
        <typeparam name="TContext"> The type of context to be registered. </typeparam>
        <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
        <param name="optionsAction">
          <para>
                    An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. This provides an
                    alternative to performing configuration of the context by overriding the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context.
                </para>
          <para>
                    If an action is supplied here, the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be run if it has
                    been overridden on the derived context. <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> configuration will be applied
                    in addition to configuration performed here.
                </para>
          <para>
                    In order for the options to be passed into your context, you need to expose a constructor on your context that takes
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> and passes it to the base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
        </param>
        <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
        <param name="optionsLifetime"> The lifetime with which to register the DbContextOptions service in the container. </param>
        <summary>
          <para>
                    Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                    You use this method when using dependency injection in your application, such as with ASP.NET.
                    For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
                </para>
          <para>
                    This overload has an <paramref name="optionsAction" /> that provides the applications <see cref="T:System.IServiceProvider" />.
                    This is useful if you want to setup Entity Framework to resolve its internal services from the primary application service
                    provider.
                    By default, we recommend using the other overload, which allows Entity Framework to create and maintain its own
                    <see cref="T:System.IServiceProvider" />
                    for internal Entity Framework services.
                </para>
        </summary>
        <returns>
                The same service collection so that multiple calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
        <example>
          <code>
                     public void ConfigureServices(IServiceCollection services)
                     {
                         var connectionString = "connection string to database";
            
                         services
                             .AddEntityFrameworkSqlServer()
                             .AddDbContext&lt;MyContext&gt;((serviceProvider, options) =&gt;
                                 options.UseSqlServer(connectionString)
                                        .UseInternalServiceProvider(serviceProvider));
                     }
                 </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="AddDbContextPool&lt;TContext&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextPool&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int poolSize = 128) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextPool&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int32 poolSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContextPool(Of TContext As DbContext) (serviceCollection As IServiceCollection, optionsAction As Action(Of DbContextOptionsBuilder), Optional poolSize As Integer = 128) As IServiceCollection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="optionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" />
        <Parameter Name="poolSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TContext"> The type of context to be registered. </typeparam>
        <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
        <param name="optionsAction">
          <para>
                    A required action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. When using
                    context pooling, options configuration must be performed externally; <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />
                    will not be called.
                </para>
        </param>
        <param name="poolSize">
                ESets the maximum number of instances retained by the pool.
            </param>
        <summary>
                Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> and enables DbContext pooling.
                Instance pooling can increase throughput in high-scale scenarios such as web servers by re-using
                DbContext instances, rather than creating new instances for each request.
                You use this method when using dependency injection in your application, such as with ASP.NET.
                For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
            </summary>
        <returns>
                The same service collection so that multiple calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDbContextPool&lt;TContext&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextPool&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int poolSize = 128) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextPool&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`2&lt;class System.IServiceProvider, class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int32 poolSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContextPool(Of TContext As DbContext) (serviceCollection As IServiceCollection, optionsAction As Action(Of IServiceProvider, DbContextOptionsBuilder), Optional poolSize As Integer = 128) As IServiceCollection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="optionsAction" Type="System.Action&lt;System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" />
        <Parameter Name="poolSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TContext"> The type of context to be registered. </typeparam>
        <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
        <param name="optionsAction">
          <para>
                    A required action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. When using
                    context pooling, options configuration must be performed externally; <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />
                    will not be called.
                </para>
        </param>
        <param name="poolSize">
                Sets the maximum number of instances retained by the pool.
            </param>
        <summary>
          <para>
                    Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> and enables DbContext pooling.
                    Instance pooling can increase throughput in high-scale scenarios such as web servers by re-using
                    DbContext instances, rather than creating new instances for each request.
                    You use this method when using dependency injection in your application, such as with ASP.NET.
                    For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
                </para>
          <para>
                    This overload has an <paramref name="optionsAction" /> that provides the applications <see cref="T:System.IServiceProvider" />.
                    This is useful if you want to setup Entity Framework to resolve its internal services from the primary application service
                    provider.
                    By default, we recommend using the other overload, which allows Entity Framework to create and maintain its own
                    <see cref="T:System.IServiceProvider" />
                    for internal Entity Framework services.
                </para>
        </summary>
        <returns>
                The same service collection so that multiple calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>