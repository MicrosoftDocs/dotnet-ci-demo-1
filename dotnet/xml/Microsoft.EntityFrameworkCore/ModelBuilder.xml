<Type Name="ModelBuilder" FullName="Microsoft.EntityFrameworkCore.ModelBuilder">
  <TypeSignature Language="C#" Value="public class ModelBuilder : Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ModelBuilder extends System.Object implements class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.ModelBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class ModelBuilder&#xA;Implements IInfrastructure(Of InternalModelBuilder)" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
                    Provides a simple API surface for configuring a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableModel" /> that defines the shape of your
                    entities, the relationships between them, and how they map to the database.
                </para>
      <para>
                    You can use <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> to construct a model for a context by overriding
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)" /> on your derived context. Alternatively you can create the
                    model externally and set it on a <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> instance that is passed to the context constructor.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ModelBuilder (Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet conventions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet conventions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (conventions As ConventionSet)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="conventions" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet" />
      </Parameters>
      <Docs>
        <param name="conventions"> The conventions to be applied to the model. </param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> class that will
                apply a set of conventions.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyConfiguration&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelBuilder ApplyConfiguration&lt;TEntity&gt; (Microsoft.EntityFrameworkCore.IEntityTypeConfiguration&lt;TEntity&gt; configuration) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelBuilder ApplyConfiguration&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.IEntityTypeConfiguration`1&lt;!!TEntity&gt; configuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.ApplyConfiguration``1(Microsoft.EntityFrameworkCore.IEntityTypeConfiguration{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ApplyConfiguration(Of TEntity As Class) (configuration As IEntityTypeConfiguration(Of TEntity)) As ModelBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="configuration" Type="Microsoft.EntityFrameworkCore.IEntityTypeConfiguration&lt;TEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity"> The entity type to be configured. </typeparam>
        <param name="configuration"> The configuration to be applied. </param>
        <summary>
                Applies configuration that is defined in an <see cref="T:Microsoft.EntityFrameworkCore.IEntityTypeConfiguration`1" /> instance.
            </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Entity">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder Entity (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder Entity(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Entity (name As String) As EntityTypeBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the entity type to be configured. </param>
        <summary>
                Returns an object that can be used to configure a given entity type in the model.
                If an entity type with the provided name is not already part of the model,
                a new entity type that does not have a corresponding CLR type will be added to the model.
            </summary>
        <returns> An object that can be used to configure the entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Entity">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder Entity (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder Entity(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"> The entity type to be configured. </param>
        <summary>
                Returns an object that can be used to configure a given entity type in the model.
                If the entity type is not already part of the model, it will be added to the model.
            </summary>
        <returns> An object that can be used to configure the entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Entity">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelBuilder Entity (string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelBuilder Entity(string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity(System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Entity (name As String, buildAction As Action(Of EntityTypeBuilder)) As ModelBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the entity type to be configured. </param>
        <param name="buildAction"> An action that performs configuration of the entity type. </param>
        <summary>
          <para>
                    Performs configuration of a given entity type in the model.
                    If an entity type with the provided name is not already part of the model,
                    a new entity type that does not have a corresponding CLR type will be added to the model.
                </para>
          <para>
                    This overload allows configuration of the entity type to be done in line in the method call rather
                    than being chained after a call to <see cref="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity(System.String)" />. This allows additional
                    configuration at the model level to be chained after configuration for the entity type.
                </para>
        </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Entity">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelBuilder Entity (Type type, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelBuilder Entity(class System.Type type, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity(System.Type,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="type"> The entity type to be configured. </param>
        <param name="buildAction"> An action that performs configuration of the entity type. </param>
        <summary>
          <para>
                    Performs configuration of a given entity type in the model. If the entity type is not already part
                    of the model, it will be added to the model.
                </para>
          <para>
                    This overload allows configuration of the entity type to be done in line in the method call rather
                    than being chained after a call to <see cref="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity``1" />. This allows additional
                    configuration at the model level to be chained after configuration for the entity type.
                </para>
        </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Entity&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; Entity&lt;TEntity&gt; () where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; Entity&lt;class TEntity&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Entity(Of TEntity As Class) () As EntityTypeBuilder(Of TEntity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TEntity"> The entity type to be configured. </typeparam>
        <summary>
                Returns an object that can be used to configure a given entity type in the model.
                If the entity type is not already part of the model, it will be added to the model.
            </summary>
        <returns> An object that can be used to configure the entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Entity&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelBuilder Entity&lt;TEntity&gt; (Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;&gt; buildAction) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelBuilder Entity&lt;class TEntity&gt;(class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity``1(System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Entity(Of TEntity As Class) (buildAction As Action(Of EntityTypeBuilder(Of TEntity))) As ModelBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity"> The entity type to be configured. </typeparam>
        <param name="buildAction"> An action that performs configuration of the entity type. </param>
        <summary>
          <para>
                    Performs configuration of a given entity type in the model. If the entity type is not already part
                    of the model, it will be added to the model.
                </para>
          <para>
                    This overload allows configuration of the entity type to be done in line in the method call rather
                    than being chained after a call to <see cref="M:Microsoft.EntityFrameworkCore.ModelBuilder.Entity``1" />. This allows additional
                    configuration at the model level to be chained after configuration for the entity type.
                </para>
        </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnnotation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelBuilder HasAnnotation (string annotation, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelBuilder HasAnnotation(string annotation, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.HasAnnotation(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasAnnotation (annotation As String, value As Object) As ModelBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="annotation"> The key of the annotation to be added or updated. </param>
        <param name="value"> The value to be stored in the annotation. </param>
        <summary>
                Adds or updates an annotation on the model. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
        <returns> The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that multiple configuration calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasChangeTrackingStrategy">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelBuilder HasChangeTrackingStrategy (Microsoft.EntityFrameworkCore.ChangeTrackingStrategy changeTrackingStrategy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelBuilder HasChangeTrackingStrategy(valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy changeTrackingStrategy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.HasChangeTrackingStrategy(Microsoft.EntityFrameworkCore.ChangeTrackingStrategy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeTrackingStrategy" Type="Microsoft.EntityFrameworkCore.ChangeTrackingStrategy" />
      </Parameters>
      <Docs>
        <param name="changeTrackingStrategy"> The change tracking strategy to be used. </param>
        <summary>
                Configures the default <see cref="T:Microsoft.EntityFrameworkCore.ChangeTrackingStrategy" /> to be used for this model.
                This strategy indicates how the context detects changes to properties for an instance of an entity type.
            </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasChangeTrackingStrategy">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelBuilder HasChangeTrackingStrategy (Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy changeTrackingStrategy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelBuilder HasChangeTrackingStrategy(valuetype Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy changeTrackingStrategy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.HasChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeTrackingStrategy" Type="Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy" />
      </Parameters>
      <Docs>
        <param name="changeTrackingStrategy"> The change tracking strategy to be used. </param>
        <summary>
                Configures the default <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy" /> to be used for this model.
                This strategy indicates how the context detects changes to properties for an instance of an entity type.
            </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ignore">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelBuilder Ignore (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelBuilder Ignore(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.Ignore(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"> The entity type to be removed from the model. </param>
        <summary>
                Excludes the given entity type from the model. This method is typically used to remove types from
                the model that were added by convention.
            </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ignore&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelBuilder Ignore&lt;TEntity&gt; () where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelBuilder Ignore&lt;class TEntity&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.Ignore``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Ignore(Of TEntity As Class) () As ModelBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TEntity"> The  entity type to be removed from the model. </typeparam>
        <summary>
                Excludes the given entity type from the model. This method is typically used to remove types from
                the model that were added by convention.
            </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder&gt;.Instance">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder&gt;.Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder&gt;.Instance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ModelBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure&lt;Microsoft#EntityFrameworkCore#Metadata#Internal#InternalModelBuilder&gt;#Instance" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Instance As InternalModelBuilder Implements IInfrastructure(Of InternalModelBuilder).Instance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>
                    The internal <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> being used to configure this model.
                </para>
          <para>
                    This property is intended for use by extension methods to configure the model. It is not intended to be used in
                    application code.
                </para>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Model">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IMutableModel Model { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IMutableModel Model" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ModelBuilder.Model" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Model As IMutableModel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableModel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The model being configured.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsePropertyAccessMode">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelBuilder UsePropertyAccessMode (Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode propertyAccessMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelBuilder UsePropertyAccessMode(valuetype Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode propertyAccessMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" /> to use for properties of this model. </param>
        <summary>
          <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" /> to use for all properties of this entity type.
                </para>
          <para>
                    By default, the backing field, if one is found by convention or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses.  Calling this method witll change that behavior
                    for all properties in the model as described in the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" /> enum.
                </para>
        </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsePropertyAccessMode">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelBuilder UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelBuilder UsePropertyAccessMode(valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="Microsoft.EntityFrameworkCore.PropertyAccessMode" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for properties of this model. </param>
        <summary>
          <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for all properties of this entity type.
                </para>
          <para>
                    By default, the backing field, if one is found by convention or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses.  Calling this method witll change that behavior
                    for all properties in the model as described in the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> enum.
                </para>
        </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>