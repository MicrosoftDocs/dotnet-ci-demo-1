<Type Name="DbContextOptionsBuilder" FullName="Microsoft.EntityFrameworkCore.DbContextOptionsBuilder">
  <TypeSignature Language="C#" Value="public class DbContextOptionsBuilder : Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsBuilderInfrastructure" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DbContextOptionsBuilder extends System.Object implements class Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsBuilderInfrastructure" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class DbContextOptionsBuilder&#xA;Implements IDbContextOptionsBuilderInfrastructure" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsBuilderInfrastructure</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
                    Provides a simple API surface for configuring <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" />. Databases (and other extensions)
                    typically define extension methods on this object that allow you to configure the database connection (and other
                    options) to be used for a context.
                </para>
      <para>
                    You can use <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" /> to configure a context by overriding
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> or creating a <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" />
                    externally and passing it to the context constructor.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DbContextOptionsBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" /> class with no options set.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DbContextOptionsBuilder (Microsoft.EntityFrameworkCore.DbContextOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.DbContextOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (options As DbContextOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="Microsoft.EntityFrameworkCore.DbContextOptions" />
      </Parameters>
      <Docs>
        <param name="options"> The options to be configured. </param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" /> class to further configure
                a given <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureWarnings">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder ConfigureWarnings (Action&lt;Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder&gt; warningsConfigurationBuilderAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder ConfigureWarnings(class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder&gt; warningsConfigurationBuilderAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.ConfigureWarnings(System.Action{Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConfigureWarnings (warningsConfigurationBuilderAction As Action(Of WarningsConfigurationBuilder)) As DbContextOptionsBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="warningsConfigurationBuilderAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="warningsConfigurationBuilderAction">
                An action to configure the warning behavior.
            </param>
        <summary>
          <para>
                    Configures the runtime behavior of warnings generated by Entity Framework. You can set a default
                    behavior and behaviors for each warning type.
                </para>
          <para>
                    Note that changing this configuration can cause EF to build a new internal service provider, which
                    may cause issues with performance. Generally it is expected that no more than one or two different
                    configurations will be used for a given application.
                </para>
          <para>
                    Note that if the application is setting the internal service provider through a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />, then this option must configured the same way
                    for all uses of that service provider. Consider instead not calling <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />
                    so that EF will manage the service providers and can create new instances as required.
                </para>
        </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
        <example>
          <code>
                    optionsBuilder.ConfigureWarnings(warnings =&gt; 
                        warnings.Default(WarningBehavior.Ignore)
                                .Log(CoreEventId.IncludeIgnoredWarning, CoreEventId.ModelValidationWarning)
                                .Throw(RelationalEventId.QueryClientEvaluationWarning))
                </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ConfigureWarnings">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder ConfigureWarnings (Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder&gt; warningsConfigurationBuilderAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder ConfigureWarnings(class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder&gt; warningsConfigurationBuilderAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.ConfigureWarnings(System.Action{Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConfigureWarnings (warningsConfigurationBuilderAction As Action(Of WarningsConfigurationBuilder)) As DbContextOptionsBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="warningsConfigurationBuilderAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="warningsConfigurationBuilderAction">
                An action to configure the warning behavior.
            </param>
        <summary>
                Configures the runtime behavior of warnings generated by Entity Framework. You can set a default behavior and behaviors for
                each warning type.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
        <example>
          <code>
                    optionsBuilder.ConfigureWarnings(warnings =&gt; 
                        warnings.Default(WarningBehavior.Ignore)
                                .Log(CoreEventId.IncludeIgnoredWarning, CoreEventId.ModelValidationWarning)
                                .Throw(RelationalEventId.QueryClientEvaluationWarning))
                </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="EnableSensitiveDataLogging">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder EnableSensitiveDataLogging ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder EnableSensitiveDataLogging() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.EnableSensitiveDataLogging" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EnableSensitiveDataLogging () As DbContextOptionsBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Enables application data to be included in exception messages, logging, etc. This can include the values assigned to properties
                of your entity instances, parameter values for commands being sent to the database, and other such data. You should only enable
                this flag if you have the appropriate security measures in place based on the sensitivity of this data.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableSensitiveDataLogging">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder EnableSensitiveDataLogging (bool sensitiveDataLoggingEnabled = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder EnableSensitiveDataLogging(bool sensitiveDataLoggingEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.EnableSensitiveDataLogging(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EnableSensitiveDataLogging (Optional sensitiveDataLoggingEnabled As Boolean = true) As DbContextOptionsBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sensitiveDataLoggingEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sensitiveDataLoggingEnabled">To be added.</param>
        <summary>
          <para>
                    Enables application data to be included in exception messages, logging, etc. This can include the
                    values assigned to properties of your entity instances, parameter values for commands being sent
                    to the database, and other such data. You should only enable this flag if you have the appropriate
                    security measures in place based on the sensitivity of this data.
                </para>
          <para>
                    Note that if the application is setting the internal service provider through a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />, then this option must configured the same way
                    for all uses of that service provider. Consider instead not calling <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />
                    so that EF will manage the service providers and can create new instances as required.
                </para>
        </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConfigured">
      <MemberSignature Language="C#" Value="public virtual bool IsConfigured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConfigured" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.IsConfigured" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsConfigured As Boolean" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>
                    Gets a value indicating whether any options have been configured.
                </para>
          <para>
                    This can be useful when you have overridden <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> to configure
                    the context, but in some cases you also externally provide options via the context constructor. This property can be
                    used to determine if the options have already been set, and skip some or all of the logic in
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />.
                </para>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsBuilderInfrastructure.AddOrUpdateExtension&lt;TExtension&gt;">
      <MemberSignature Language="C#" Value="void IDbContextOptionsBuilderInfrastructure.AddOrUpdateExtension&lt;TExtension&gt; (TExtension extension) where TExtension : class, Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension;" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsBuilderInfrastructure.AddOrUpdateExtension&lt;class (class Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension) TExtension&gt;(!!TExtension extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IDbContextOptionsBuilderInfrastructure#AddOrUpdateExtension``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Sub AddOrUpdateExtension(Of TExtension As {Class, IDbContextOptionsExtension}) (extension As TExtension) Implements IDbContextOptionsBuilderInfrastructure.AddOrUpdateExtension" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TExtension">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="extension" Type="TExtension" />
      </Parameters>
      <Docs>
        <typeparam name="TExtension"> The type of extension to be added. </typeparam>
        <param name="extension"> The extension to be added. </param>
        <summary>
          <para>
                    Adds the given extension to the options. If an existing extension of the same type already exists, it will be replaced.
                </para>
          <para>
                    This method is intended for use by extension methods to configure the context. It is not intended to be used in
                    application code.
                </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.DbContextOptions Options" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.Options" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Options As DbContextOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the options being configured.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceService&lt;TService,TImplementation&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder ReplaceService&lt;TService,TImplementation&gt; () where TImplementation : TService;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder ReplaceService&lt;TService, (!!TService) TImplementation&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.ReplaceService``2" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplaceService(Of TService, TImplementation) () As DbContextOptionsBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TService" />
        <TypeParameter Name="TImplementation">
          <Constraints>
            <BaseTypeName>TService</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TService"> The type (usually an interface) that defines the contract of the service to replace. </typeparam>
        <typeparam name="TImplementation"> The new implementation type for the service. </typeparam>
        <summary>
          <para>
                    Replaces the internal Entity Framework implementation of a service contract with a different
                    implementation.
                </para>
          <para>
                    This method can only be used when EF is building and managing its internal service provider.
                    If the service provider is being built externally and passed to
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />, then replacement services should be configured on
                    that service provider before it is passed to EF.
                </para>
          <para>
                    The replacement service gets the same scope as the EF service that it is replacing.
                </para>
        </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseApplicationServiceProvider">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseApplicationServiceProvider (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseApplicationServiceProvider(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseApplicationServiceProvider(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UseApplicationServiceProvider (serviceProvider As IServiceProvider) As DbContextOptionsBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider"> The service provider to be used. </param>
        <summary>
                Sets the <see cref="T:System.IServiceProvider" /> from which application services will be obtained. This
                is done automatically when using 'AddDbContext', so it is rare that this method needs to be called.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseInternalServiceProvider">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseInternalServiceProvider (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseInternalServiceProvider(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UseInternalServiceProvider (serviceProvider As IServiceProvider) As DbContextOptionsBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider"> The service provider to be used. </param>
        <summary>
          <para>
                    Sets the <see cref="T:System.IServiceProvider" /> that the context should resolve all of its services from. EF will
                    create and manage a service provider if none is specified.
                </para>
          <para>
                    The service provider must contain all the services required by Entity Framework (and the database being
                    used). The Entity Framework services can be registered using an extension method on <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                    For example, the Microsoft SQL Server provider includes an AddEntityFrameworkSqlServer() method to add
                    the required services.
                </para>
          <para>
                    If the <see cref="T:System.IServiceProvider" /> has a <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> or
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> registered, then this will be used as the options for
                    this context instance.
                </para>
        </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLoggerFactory">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseLoggerFactory (Microsoft.Extensions.Logging.ILoggerFactory loggerFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseLoggerFactory(class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseLoggerFactory(Microsoft.Extensions.Logging.ILoggerFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UseLoggerFactory (loggerFactory As ILoggerFactory) As DbContextOptionsBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory" />
      </Parameters>
      <Docs>
        <param name="loggerFactory"> The logger factory to be used. </param>
        <summary>
          <para>
                    Sets the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> that will be used to create <see cref="T:Microsoft.Extensions.Logging.ILogger" /> instances
                    for logging done by this context. It is never necessary to call this method since EF can obtain
                    or create a logger factory automatically.
                </para>
          <para>
                    There is no need to call this method when using one of the 'AddDbContext' methods.
                    'AddDbContext' will ensure that the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> used by EF is obtained from the
                    application service provider.
                </para>
          <para>
                    Note that changing the logger factory can cause EF to build a new internal service provider, which
                    may cause issues with performance. Generally it is expected that no more than one or two different
                    instances will be used for a given application.
                </para>
          <para>
                    This method cannot be used if the application is setting the internal service provider
                    through a call to <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />. In this case, the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" />
                    should be configured directly in that service provider.
                </para>
        </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseMemoryCache">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseMemoryCache (Microsoft.Extensions.Caching.Memory.IMemoryCache memoryCache);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseMemoryCache(class Microsoft.Extensions.Caching.Memory.IMemoryCache memoryCache) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseMemoryCache(Microsoft.Extensions.Caching.Memory.IMemoryCache)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UseMemoryCache (memoryCache As IMemoryCache) As DbContextOptionsBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memoryCache" Type="Microsoft.Extensions.Caching.Memory.IMemoryCache" />
      </Parameters>
      <Docs>
        <param name="memoryCache"> The memory cache to be used. </param>
        <summary>
          <para>
                    Sets the <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" /> to be used for query caching by this context. It is never
                    necessary to call this method since EF can obtain or create a memory cache automatically.
                </para>
          <para>
                    There is no need to call this method when using one of the 'AddDbContext' methods.
                    'AddDbContext' will ensure that the <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" /> used by EF is obtained from the
                    application service provider.
                </para>
          <para>
                    Note that changing the memory cache can cause EF to build a new internal service provider, which
                    may cause issues with performance. Generally it is expected that no more than one or two different
                    instances will be used for a given application.
                </para>
          <para>
                    This method cannot be used if the application is setting the internal service provider
                    through a call to <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />. In this case, the <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" />
                    should be configured directly in that service provider.
                </para>
        </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseModel">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseModel (Microsoft.EntityFrameworkCore.Metadata.IModel model);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseModel(class Microsoft.EntityFrameworkCore.Metadata.IModel model) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseModel(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UseModel (model As IModel) As DbContextOptionsBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" />
      </Parameters>
      <Docs>
        <param name="model"> The model to be used. </param>
        <summary>
                Sets the model to be used for the context. If the model is set, then <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)" />
                will not be run.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseQueryTrackingBehavior">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseQueryTrackingBehavior (Microsoft.EntityFrameworkCore.QueryTrackingBehavior queryTrackingBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseQueryTrackingBehavior(valuetype Microsoft.EntityFrameworkCore.QueryTrackingBehavior queryTrackingBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseQueryTrackingBehavior(Microsoft.EntityFrameworkCore.QueryTrackingBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryTrackingBehavior" Type="Microsoft.EntityFrameworkCore.QueryTrackingBehavior" />
      </Parameters>
      <Docs>
        <param name="queryTrackingBehavior">To be added.</param>
        <summary>
          <para>
                    Sets the tracking behavior for LINQ queries run against the context. Disabling change tracking
                    is useful for read-only scenarios because it avoids the overhead of setting up change tracking for each
                    entity instance. You should not disable change tracking if you want to manipulate entity instances and
                    persist those changes to the database using <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />.
                </para>
          <para>
                    This method sets the default behavior for all contexts created with these options, but you can override this
                    behavior for a context instance using <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.QueryTrackingBehavior" /> or on individual
                    queries using the <see cref="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})" />
                    and <see cref="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsTracking``1(System.Linq.IQueryable{``0})" /> methods.
                </para>
          <para>
                    The default value is <see cref="F:Microsoft.EntityFrameworkCore.QueryTrackingBehavior.TrackAll" />. This means 
                    the change tracker will keep track of changes for all entities that are returned from a LINQ query.
                </para>
        </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>