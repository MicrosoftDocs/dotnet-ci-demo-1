<Type Name="EF" FullName="Microsoft.EntityFrameworkCore.EF">
  <TypeSignature Language="C#" Value="public static class EF" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EF extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.EF" />
  <TypeSignature Language="VB.NET" Value="Public Class EF" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Static methods that are useful in application code where there is not an EF type for the method to be accessed from. For example,
                referencing a shadow state property in a LINQ query.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CompileAsyncQuery&lt;TContext,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt;&gt; CompileAsyncQuery&lt;TContext,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,Microsoft.EntityFrameworkCore.DbSet&lt;TResult&gt;&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext where TResult : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`2&lt;!!TContext, valuetype Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1&lt;!!TResult&gt;&gt; CompileAsyncQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, class TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TContext, class Microsoft.EntityFrameworkCore.DbSet`1&lt;!!TResult&gt;&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``2(System.Linq.Expressions.Expression{System.Func{``0,Microsoft.EntityFrameworkCore.DbSet{``1}}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileAsyncQuery(Of TContext As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, DbSet(Of TResult)))) As Func(Of TContext, AsyncEnumerable(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,Microsoft.EntityFrameworkCore.DbSet&lt;TResult&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileAsyncQuery&lt;TContext,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt;&gt; CompileAsyncQuery&lt;TContext,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,System.Linq.IQueryable&lt;TResult&gt;&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`2&lt;!!TContext, valuetype Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1&lt;!!TResult&gt;&gt; CompileAsyncQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TContext, class System.Linq.IQueryable`1&lt;!!TResult&gt;&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``2(System.Linq.Expressions.Expression{System.Func{``0,System.Linq.IQueryable{``1}}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileAsyncQuery(Of TContext As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, IQueryable(Of TResult)))) As Func(Of TContext, AsyncEnumerable(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,System.Linq.IQueryable&lt;TResult&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileAsyncQuery&lt;TContext,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; CompileAsyncQuery&lt;TContext,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,System.Threading.CancellationToken,TResult&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`3&lt;!!TContext, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; CompileAsyncQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TContext, valuetype System.Threading.CancellationToken, !!TResult&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``2(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.CancellationToken,``1}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileAsyncQuery(Of TContext As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, CancellationToken, TResult))) As Func(Of TContext, CancellationToken, Task(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,System.Threading.CancellationToken,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileAsyncQuery&lt;TContext,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,System.Threading.Tasks.Task&lt;TResult&gt;&gt; CompileAsyncQuery&lt;TContext,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TResult&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`2&lt;!!TContext, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; CompileAsyncQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TContext, !!TResult&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileAsyncQuery(Of TContext As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, TResult))) As Func(Of TContext, Task(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,System.Threading.Tasks.Task&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileAsyncQuery&lt;TContext,TParam1,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt;&gt; CompileAsyncQuery&lt;TContext,TParam1,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,System.Linq.IQueryable&lt;TResult&gt;&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`3&lt;!!TContext, !!TParam1, valuetype Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1&lt;!!TResult&gt;&gt; CompileAsyncQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TContext, !!TParam1, class System.Linq.IQueryable`1&lt;!!TResult&gt;&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``3(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Linq.IQueryable{``2}}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileAsyncQuery(Of TContext As DbContext, TParam1 As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, IQueryable(Of TResult)))) As Func(Of TContext, TParam1, AsyncEnumerable(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,System.Linq.IQueryable&lt;TResult&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileAsyncQuery&lt;TContext,TParam1,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; CompileAsyncQuery&lt;TContext,TParam1,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,System.Threading.CancellationToken,TResult&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`4&lt;!!TContext, !!TParam1, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; CompileAsyncQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`4&lt;!!TContext, !!TParam1, valuetype System.Threading.CancellationToken, !!TResult&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``3(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Threading.CancellationToken,``2}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileAsyncQuery(Of TContext As DbContext, TParam1 As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, CancellationToken, TResult))) As Func(Of TContext, TParam1, CancellationToken, Task(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,System.Threading.CancellationToken,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileAsyncQuery&lt;TContext,TParam1,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,System.Threading.Tasks.Task&lt;TResult&gt;&gt; CompileAsyncQuery&lt;TContext,TParam1,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,TResult&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`3&lt;!!TContext, !!TParam1, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; CompileAsyncQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TContext, !!TParam1, !!TResult&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileAsyncQuery(Of TContext As DbContext, TParam1 As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, TResult))) As Func(Of TContext, TParam1, Task(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,System.Threading.Tasks.Task&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileAsyncQuery&lt;TContext,TParam1,TParam2,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,TParam2,Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt;&gt; CompileAsyncQuery&lt;TContext,TParam1,TParam2,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,TParam2,System.Linq.IQueryable&lt;TResult&gt;&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`4&lt;!!TContext, !!TParam1, !!TParam2, valuetype Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1&lt;!!TResult&gt;&gt; CompileAsyncQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TParam2, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`4&lt;!!TContext, !!TParam1, !!TParam2, class System.Linq.IQueryable`1&lt;!!TResult&gt;&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Linq.IQueryable{``3}}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileAsyncQuery(Of TContext As DbContext, TParam1 As DbContext, TParam2 As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, TParam2, IQueryable(Of TResult)))) As Func(Of TContext, TParam1, TParam2, AsyncEnumerable(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,TParam2,Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,TParam2,System.Linq.IQueryable&lt;TResult&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TParam2">The type of the second query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileAsyncQuery&lt;TContext,TParam1,TParam2,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,TParam2,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; CompileAsyncQuery&lt;TContext,TParam1,TParam2,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,TParam2,System.Threading.CancellationToken,TResult&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`5&lt;!!TContext, !!TParam1, !!TParam2, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; CompileAsyncQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TParam2, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`5&lt;!!TContext, !!TParam1, !!TParam2, valuetype System.Threading.CancellationToken, !!TResult&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Threading.CancellationToken,``3}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileAsyncQuery(Of TContext As DbContext, TParam1 As DbContext, TParam2 As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, TParam2, CancellationToken, TResult))) As Func(Of TContext, TParam1, TParam2, CancellationToken, Task(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,TParam2,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,TParam2,System.Threading.CancellationToken,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TParam2">The type of the second query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileAsyncQuery&lt;TContext,TParam1,TParam2,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,TParam2,System.Threading.Tasks.Task&lt;TResult&gt;&gt; CompileAsyncQuery&lt;TContext,TParam1,TParam2,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,TParam2,TResult&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`4&lt;!!TContext, !!TParam1, !!TParam2, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; CompileAsyncQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TParam2, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`4&lt;!!TContext, !!TParam1, !!TParam2, !!TResult&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileAsyncQuery(Of TContext As DbContext, TParam1 As DbContext, TParam2 As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, TParam2, TResult))) As Func(Of TContext, TParam1, TParam2, Task(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,TParam2,System.Threading.Tasks.Task&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,TParam2,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TParam2">The type of the second query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileAsyncQuery&lt;TContext,TParam1,TParam2,TParam3,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,TParam2,TParam3,Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt;&gt; CompileAsyncQuery&lt;TContext,TParam1,TParam2,TParam3,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,TParam2,TParam3,System.Linq.IQueryable&lt;TResult&gt;&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`5&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, valuetype Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1&lt;!!TResult&gt;&gt; CompileAsyncQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TParam2, TParam3, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`5&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, class System.Linq.IQueryable`1&lt;!!TResult&gt;&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Linq.IQueryable{``4}}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileAsyncQuery(Of TContext As DbContext, TParam1 As DbContext, TParam2 As DbContext, TParam3 As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, TParam2, TParam3, IQueryable(Of TResult)))) As Func(Of TContext, TParam1, TParam2, TParam3, AsyncEnumerable(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,TParam2,TParam3,Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
        <TypeParameter Name="TParam3" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,TParam2,TParam3,System.Linq.IQueryable&lt;TResult&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TParam2">The type of the second query parameter.</typeparam>
        <typeparam name="TParam3">The type of the third query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileAsyncQuery&lt;TContext,TParam1,TParam2,TParam3,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,TParam2,TParam3,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; CompileAsyncQuery&lt;TContext,TParam1,TParam2,TParam3,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,TParam2,TParam3,System.Threading.CancellationToken,TResult&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`6&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; CompileAsyncQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TParam2, TParam3, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`6&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, valuetype System.Threading.CancellationToken, !!TResult&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Threading.CancellationToken,``4}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileAsyncQuery(Of TContext As DbContext, TParam1 As DbContext, TParam2 As DbContext, TParam3 As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, TParam2, TParam3, CancellationToken, TResult))) As Func(Of TContext, TParam1, TParam2, TParam3, CancellationToken, Task(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,TParam2,TParam3,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
        <TypeParameter Name="TParam3" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,TParam2,TParam3,System.Threading.CancellationToken,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TParam2">The type of the second query parameter.</typeparam>
        <typeparam name="TParam3">The type of the third query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileAsyncQuery&lt;TContext,TParam1,TParam2,TParam3,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,TParam2,TParam3,System.Threading.Tasks.Task&lt;TResult&gt;&gt; CompileAsyncQuery&lt;TContext,TParam1,TParam2,TParam3,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,TParam2,TParam3,TResult&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`5&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; CompileAsyncQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TParam2, TParam3, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`5&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, !!TResult&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileAsyncQuery(Of TContext As DbContext, TParam1 As DbContext, TParam2 As DbContext, TParam3 As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, TParam2, TParam3, TResult))) As Func(Of TContext, TParam1, TParam2, TParam3, Task(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,TParam2,TParam3,System.Threading.Tasks.Task&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
        <TypeParameter Name="TParam3" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,TParam2,TParam3,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TParam2">The type of the second query parameter.</typeparam>
        <typeparam name="TParam3">The type of the third query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileAsyncQuery&lt;TContext,TParam1,TParam2,TParam3,TParam4,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt;&gt; CompileAsyncQuery&lt;TContext,TParam1,TParam2,TParam3,TParam4,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,System.Linq.IQueryable&lt;TResult&gt;&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`6&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, !!TParam4, valuetype Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1&lt;!!TResult&gt;&gt; CompileAsyncQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TParam2, TParam3, TParam4, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`6&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, !!TParam4, class System.Linq.IQueryable`1&lt;!!TResult&gt;&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.Linq.IQueryable{``5}}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileAsyncQuery(Of TContext As DbContext, TParam1 As DbContext, TParam2 As DbContext, TParam3 As DbContext, TParam4 As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, TParam2, TParam3, TParam4, IQueryable(Of TResult)))) As Func(Of TContext, TParam1, TParam2, TParam3, TParam4, AsyncEnumerable(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
        <TypeParameter Name="TParam3" />
        <TypeParameter Name="TParam4" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,System.Linq.IQueryable&lt;TResult&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TParam2">The type of the second query parameter.</typeparam>
        <typeparam name="TParam3">The type of the third query parameter.</typeparam>
        <typeparam name="TParam4">The type of the fourth query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileAsyncQuery&lt;TContext,TParam1,TParam2,TParam3,TParam4,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; CompileAsyncQuery&lt;TContext,TParam1,TParam2,TParam3,TParam4,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,System.Threading.CancellationToken,TResult&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`7&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, !!TParam4, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; CompileAsyncQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TParam2, TParam3, TParam4, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`7&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, !!TParam4, valuetype System.Threading.CancellationToken, !!TResult&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.Threading.CancellationToken,``5}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileAsyncQuery(Of TContext As DbContext, TParam1 As DbContext, TParam2 As DbContext, TParam3 As DbContext, TParam4 As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, TParam2, TParam3, TParam4, CancellationToken, TResult))) As Func(Of TContext, TParam1, TParam2, TParam3, TParam4, CancellationToken, Task(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
        <TypeParameter Name="TParam3" />
        <TypeParameter Name="TParam4" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,System.Threading.CancellationToken,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TParam2">The type of the second query parameter.</typeparam>
        <typeparam name="TParam3">The type of the third query parameter.</typeparam>
        <typeparam name="TParam4">The type of the fourth query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileAsyncQuery&lt;TContext,TParam1,TParam2,TParam3,TParam4,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,System.Threading.Tasks.Task&lt;TResult&gt;&gt; CompileAsyncQuery&lt;TContext,TParam1,TParam2,TParam3,TParam4,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TResult&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`6&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, !!TParam4, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; CompileAsyncQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TParam2, TParam3, TParam4, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`6&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, !!TParam4, !!TResult&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileAsyncQuery(Of TContext As DbContext, TParam1 As DbContext, TParam2 As DbContext, TParam3 As DbContext, TParam4 As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, TParam2, TParam3, TParam4, TResult))) As Func(Of TContext, TParam1, TParam2, TParam3, TParam4, Task(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,System.Threading.Tasks.Task&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
        <TypeParameter Name="TParam3" />
        <TypeParameter Name="TParam4" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TParam2">The type of the second query parameter.</typeparam>
        <typeparam name="TParam3">The type of the third query parameter.</typeparam>
        <typeparam name="TParam4">The type of the fourth query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileAsyncQuery&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt;&gt; CompileAsyncQuery&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,System.Linq.IQueryable&lt;TResult&gt;&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`7&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, !!TParam4, !!TParam5, valuetype Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1&lt;!!TResult&gt;&gt; CompileAsyncQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`7&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, !!TParam4, !!TParam5, class System.Linq.IQueryable`1&lt;!!TResult&gt;&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,System.Linq.IQueryable{``6}}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileAsyncQuery(Of TContext As DbContext, TParam1 As DbContext, TParam2 As DbContext, TParam3 As DbContext, TParam4 As DbContext, TParam5 As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, TParam2, TParam3, TParam4, TParam5, IQueryable(Of TResult)))) As Func(Of TContext, TParam1, TParam2, TParam3, TParam4, TParam5, AsyncEnumerable(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
        <TypeParameter Name="TParam3" />
        <TypeParameter Name="TParam4" />
        <TypeParameter Name="TParam5" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,System.Linq.IQueryable&lt;TResult&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TParam2">The type of the second query parameter.</typeparam>
        <typeparam name="TParam3">The type of the third query parameter.</typeparam>
        <typeparam name="TParam4">The type of the fourth query parameter.</typeparam>
        <typeparam name="TParam5">The type of the fifth query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileAsyncQuery&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; CompileAsyncQuery&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,System.Threading.CancellationToken,TResult&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`8&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, !!TParam4, !!TParam5, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; CompileAsyncQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`8&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, !!TParam4, !!TParam5, valuetype System.Threading.CancellationToken, !!TResult&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,System.Threading.CancellationToken,``6}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileAsyncQuery(Of TContext As DbContext, TParam1 As DbContext, TParam2 As DbContext, TParam3 As DbContext, TParam4 As DbContext, TParam5 As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, TParam2, TParam3, TParam4, TParam5, CancellationToken, TResult))) As Func(Of TContext, TParam1, TParam2, TParam3, TParam4, TParam5, CancellationToken, Task(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
        <TypeParameter Name="TParam3" />
        <TypeParameter Name="TParam4" />
        <TypeParameter Name="TParam5" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,System.Threading.CancellationToken,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TParam2">The type of the second query parameter.</typeparam>
        <typeparam name="TParam3">The type of the third query parameter.</typeparam>
        <typeparam name="TParam4">The type of the fourth query parameter.</typeparam>
        <typeparam name="TParam5">The type of the fifth query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileAsyncQuery&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,System.Threading.Tasks.Task&lt;TResult&gt;&gt; CompileAsyncQuery&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,TResult&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`7&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, !!TParam4, !!TParam5, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; CompileAsyncQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`7&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, !!TParam4, !!TParam5, !!TResult&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileAsyncQuery``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileAsyncQuery(Of TContext As DbContext, TParam1 As DbContext, TParam2 As DbContext, TParam3 As DbContext, TParam4 As DbContext, TParam5 As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TResult))) As Func(Of TContext, TParam1, TParam2, TParam3, TParam4, TParam5, Task(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,System.Threading.Tasks.Task&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
        <TypeParameter Name="TParam3" />
        <TypeParameter Name="TParam4" />
        <TypeParameter Name="TParam5" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TParam2">The type of the second query parameter.</typeparam>
        <typeparam name="TParam3">The type of the third query parameter.</typeparam>
        <typeparam name="TParam4">The type of the fourth query parameter.</typeparam>
        <typeparam name="TParam5">The type of the fifth query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileQuery&lt;TContext,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; CompileQuery&lt;TContext,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,Microsoft.EntityFrameworkCore.DbSet&lt;TResult&gt;&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext where TResult : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`2&lt;!!TContext, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; CompileQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, class TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TContext, class Microsoft.EntityFrameworkCore.DbSet`1&lt;!!TResult&gt;&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``2(System.Linq.Expressions.Expression{System.Func{``0,Microsoft.EntityFrameworkCore.DbSet{``1}}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileQuery(Of TContext As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, DbSet(Of TResult)))) As Func(Of TContext, IEnumerable(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,Microsoft.EntityFrameworkCore.DbSet&lt;TResult&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileQuery&lt;TContext,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; CompileQuery&lt;TContext,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,System.Linq.IQueryable&lt;TResult&gt;&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`2&lt;!!TContext, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; CompileQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TContext, class System.Linq.IQueryable`1&lt;!!TResult&gt;&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``2(System.Linq.Expressions.Expression{System.Func{``0,System.Linq.IQueryable{``1}}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileQuery(Of TContext As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, IQueryable(Of TResult)))) As Func(Of TContext, IEnumerable(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,System.Linq.IQueryable&lt;TResult&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileQuery&lt;TContext,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TResult&gt; CompileQuery&lt;TContext,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TResult&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`2&lt;!!TContext, !!TResult&gt; CompileQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TContext, !!TResult&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileQuery(Of TContext As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, TResult))) As Func(Of TContext, TResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileQuery&lt;TContext,TParam1,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; CompileQuery&lt;TContext,TParam1,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,System.Linq.IQueryable&lt;TResult&gt;&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`3&lt;!!TContext, !!TParam1, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; CompileQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TContext, !!TParam1, class System.Linq.IQueryable`1&lt;!!TResult&gt;&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``3(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Linq.IQueryable{``2}}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileQuery(Of TContext As DbContext, TParam1 As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, IQueryable(Of TResult)))) As Func(Of TContext, TParam1, IEnumerable(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,System.Linq.IQueryable&lt;TResult&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileQuery&lt;TContext,TParam1,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,TResult&gt; CompileQuery&lt;TContext,TParam1,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,TResult&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`3&lt;!!TContext, !!TParam1, !!TResult&gt; CompileQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TContext, !!TParam1, !!TResult&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileQuery(Of TContext As DbContext, TParam1 As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, TResult))) As Func(Of TContext, TParam1, TResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileQuery&lt;TContext,TResult,TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; CompileQuery&lt;TContext,TResult,TProperty&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;TResult,TProperty&gt;&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`2&lt;!!TContext, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; CompileQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TResult, TProperty&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TContext, class Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2&lt;!!TResult, !!TProperty&gt;&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``3(System.Linq.Expressions.Expression{System.Func{``0,Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``1,``2}}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileQuery(Of TContext As DbContext, TResult As DbContext, TProperty As DbContext) (queryExpression As Expression(Of Func(Of TContext, IIncludableQueryable(Of TResult, TProperty)))) As Func(Of TContext, IEnumerable(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TResult" />
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;TResult,TProperty&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <typeparam name="TProperty">The included property type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileQuery&lt;TContext,TParam1,TParam2,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,TParam2,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; CompileQuery&lt;TContext,TParam1,TParam2,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,TParam2,System.Linq.IQueryable&lt;TResult&gt;&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`4&lt;!!TContext, !!TParam1, !!TParam2, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; CompileQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TParam2, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`4&lt;!!TContext, !!TParam1, !!TParam2, class System.Linq.IQueryable`1&lt;!!TResult&gt;&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Linq.IQueryable{``3}}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileQuery(Of TContext As DbContext, TParam1 As DbContext, TParam2 As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, TParam2, IQueryable(Of TResult)))) As Func(Of TContext, TParam1, TParam2, IEnumerable(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,TParam2,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,TParam2,System.Linq.IQueryable&lt;TResult&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TParam2">The type of the second query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileQuery&lt;TContext,TParam1,TParam2,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,TParam2,TResult&gt; CompileQuery&lt;TContext,TParam1,TParam2,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,TParam2,TResult&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`4&lt;!!TContext, !!TParam1, !!TParam2, !!TResult&gt; CompileQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TParam2, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`4&lt;!!TContext, !!TParam1, !!TParam2, !!TResult&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileQuery(Of TContext As DbContext, TParam1 As DbContext, TParam2 As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, TParam2, TResult))) As Func(Of TContext, TParam1, TParam2, TResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,TParam2,TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,TParam2,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TParam2">The type of the second query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileQuery&lt;TContext,TParam1,TResult,TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; CompileQuery&lt;TContext,TParam1,TResult,TProperty&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;TResult,TProperty&gt;&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`3&lt;!!TContext, !!TParam1, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; CompileQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TResult, TProperty&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TContext, !!TParam1, class Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2&lt;!!TResult, !!TProperty&gt;&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``4(System.Linq.Expressions.Expression{System.Func{``0,``1,Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``2,``3}}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileQuery(Of TContext As DbContext, TParam1 As DbContext, TResult As DbContext, TProperty As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, IIncludableQueryable(Of TResult, TProperty)))) As Func(Of TContext, TParam1, IEnumerable(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TResult" />
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;TResult,TProperty&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <typeparam name="TProperty">The included property type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileQuery&lt;TContext,TParam1,TParam2,TParam3,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,TParam2,TParam3,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; CompileQuery&lt;TContext,TParam1,TParam2,TParam3,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,TParam2,TParam3,System.Linq.IQueryable&lt;TResult&gt;&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`5&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; CompileQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TParam2, TParam3, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`5&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, class System.Linq.IQueryable`1&lt;!!TResult&gt;&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Linq.IQueryable{``4}}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileQuery(Of TContext As DbContext, TParam1 As DbContext, TParam2 As DbContext, TParam3 As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, TParam2, TParam3, IQueryable(Of TResult)))) As Func(Of TContext, TParam1, TParam2, TParam3, IEnumerable(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,TParam2,TParam3,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
        <TypeParameter Name="TParam3" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,TParam2,TParam3,System.Linq.IQueryable&lt;TResult&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TParam2">The type of the second query parameter.</typeparam>
        <typeparam name="TParam3">The type of the third query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileQuery&lt;TContext,TParam1,TParam2,TParam3,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,TParam2,TParam3,TResult&gt; CompileQuery&lt;TContext,TParam1,TParam2,TParam3,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,TParam2,TParam3,TResult&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`5&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, !!TResult&gt; CompileQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TParam2, TParam3, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`5&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, !!TResult&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileQuery(Of TContext As DbContext, TParam1 As DbContext, TParam2 As DbContext, TParam3 As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, TParam2, TParam3, TResult))) As Func(Of TContext, TParam1, TParam2, TParam3, TResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,TParam2,TParam3,TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
        <TypeParameter Name="TParam3" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,TParam2,TParam3,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TParam2">The type of the second query parameter.</typeparam>
        <typeparam name="TParam3">The type of the third query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileQuery&lt;TContext,TParam1,TParam2,TResult,TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,TParam2,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; CompileQuery&lt;TContext,TParam1,TParam2,TResult,TProperty&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,TParam2,Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;TResult,TProperty&gt;&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`4&lt;!!TContext, !!TParam1, !!TParam2, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; CompileQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TParam2, TResult, TProperty&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`4&lt;!!TContext, !!TParam1, !!TParam2, class Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2&lt;!!TResult, !!TProperty&gt;&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``3,``4}}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileQuery(Of TContext As DbContext, TParam1 As DbContext, TParam2 As DbContext, TResult As DbContext, TProperty As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, TParam2, IIncludableQueryable(Of TResult, TProperty)))) As Func(Of TContext, TParam1, TParam2, IEnumerable(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,TParam2,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
        <TypeParameter Name="TResult" />
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,TParam2,Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;TResult,TProperty&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TParam2">The type of the second query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <typeparam name="TProperty">The included property type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileQuery&lt;TContext,TParam1,TParam2,TParam3,TParam4,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; CompileQuery&lt;TContext,TParam1,TParam2,TParam3,TParam4,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,System.Linq.IQueryable&lt;TResult&gt;&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`6&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, !!TParam4, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; CompileQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TParam2, TParam3, TParam4, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`6&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, !!TParam4, class System.Linq.IQueryable`1&lt;!!TResult&gt;&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.Linq.IQueryable{``5}}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileQuery(Of TContext As DbContext, TParam1 As DbContext, TParam2 As DbContext, TParam3 As DbContext, TParam4 As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, TParam2, TParam3, TParam4, IQueryable(Of TResult)))) As Func(Of TContext, TParam1, TParam2, TParam3, TParam4, IEnumerable(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
        <TypeParameter Name="TParam3" />
        <TypeParameter Name="TParam4" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,System.Linq.IQueryable&lt;TResult&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TParam2">The type of the second query parameter.</typeparam>
        <typeparam name="TParam3">The type of the third query parameter.</typeparam>
        <typeparam name="TParam4">The type of the fourth query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileQuery&lt;TContext,TParam1,TParam2,TParam3,TParam4,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TResult&gt; CompileQuery&lt;TContext,TParam1,TParam2,TParam3,TParam4,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TResult&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`6&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, !!TParam4, !!TResult&gt; CompileQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TParam2, TParam3, TParam4, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`6&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, !!TParam4, !!TResult&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileQuery(Of TContext As DbContext, TParam1 As DbContext, TParam2 As DbContext, TParam3 As DbContext, TParam4 As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, TParam2, TParam3, TParam4, TResult))) As Func(Of TContext, TParam1, TParam2, TParam3, TParam4, TResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
        <TypeParameter Name="TParam3" />
        <TypeParameter Name="TParam4" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TParam2">The type of the second query parameter.</typeparam>
        <typeparam name="TParam3">The type of the third query parameter.</typeparam>
        <typeparam name="TParam4">The type of the fourth query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileQuery&lt;TContext,TParam1,TParam2,TParam3,TResult,TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,TParam2,TParam3,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; CompileQuery&lt;TContext,TParam1,TParam2,TParam3,TResult,TProperty&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,TParam2,TParam3,Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;TResult,TProperty&gt;&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`5&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; CompileQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TParam2, TParam3, TResult, TProperty&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`5&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, class Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2&lt;!!TResult, !!TProperty&gt;&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``4,``5}}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileQuery(Of TContext As DbContext, TParam1 As DbContext, TParam2 As DbContext, TParam3 As DbContext, TResult As DbContext, TProperty As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, TParam2, TParam3, IIncludableQueryable(Of TResult, TProperty)))) As Func(Of TContext, TParam1, TParam2, TParam3, IEnumerable(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,TParam2,TParam3,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
        <TypeParameter Name="TParam3" />
        <TypeParameter Name="TResult" />
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,TParam2,TParam3,Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;TResult,TProperty&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TParam2">The type of the second query parameter.</typeparam>
        <typeparam name="TParam3">The type of the third query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <typeparam name="TProperty">The included property type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileQuery&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; CompileQuery&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,System.Linq.IQueryable&lt;TResult&gt;&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`7&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, !!TParam4, !!TParam5, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; CompileQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`7&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, !!TParam4, !!TParam5, class System.Linq.IQueryable`1&lt;!!TResult&gt;&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,System.Linq.IQueryable{``6}}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileQuery(Of TContext As DbContext, TParam1 As DbContext, TParam2 As DbContext, TParam3 As DbContext, TParam4 As DbContext, TParam5 As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, TParam2, TParam3, TParam4, TParam5, IQueryable(Of TResult)))) As Func(Of TContext, TParam1, TParam2, TParam3, TParam4, TParam5, IEnumerable(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
        <TypeParameter Name="TParam3" />
        <TypeParameter Name="TParam4" />
        <TypeParameter Name="TParam5" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,System.Linq.IQueryable&lt;TResult&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TParam2">The type of the second query parameter.</typeparam>
        <typeparam name="TParam3">The type of the third query parameter.</typeparam>
        <typeparam name="TParam4">The type of the fourth query parameter.</typeparam>
        <typeparam name="TParam5">The type of the fifth query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileQuery&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,TResult&gt; CompileQuery&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,TResult&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`7&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, !!TParam4, !!TParam5, !!TResult&gt; CompileQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`7&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, !!TParam4, !!TParam5, !!TResult&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileQuery(Of TContext As DbContext, TParam1 As DbContext, TParam2 As DbContext, TParam3 As DbContext, TParam4 As DbContext, TParam5 As DbContext, TResult As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TResult))) As Func(Of TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
        <TypeParameter Name="TParam3" />
        <TypeParameter Name="TParam4" />
        <TypeParameter Name="TParam5" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TParam2">The type of the second query parameter.</typeparam>
        <typeparam name="TParam3">The type of the third query parameter.</typeparam>
        <typeparam name="TParam4">The type of the fourth query parameter.</typeparam>
        <typeparam name="TParam5">The type of the fifth query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileQuery&lt;TContext,TParam1,TParam2,TParam3,TParam4,TResult,TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; CompileQuery&lt;TContext,TParam1,TParam2,TParam3,TParam4,TResult,TProperty&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;TResult,TProperty&gt;&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`6&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, !!TParam4, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; CompileQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TParam2, TParam3, TParam4, TResult, TProperty&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`6&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, !!TParam4, class Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2&lt;!!TResult, !!TProperty&gt;&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``5,``6}}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileQuery(Of TContext As DbContext, TParam1 As DbContext, TParam2 As DbContext, TParam3 As DbContext, TParam4 As DbContext, TResult As DbContext, TProperty As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, TParam2, TParam3, TParam4, IIncludableQueryable(Of TResult, TProperty)))) As Func(Of TContext, TParam1, TParam2, TParam3, TParam4, IEnumerable(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
        <TypeParameter Name="TParam3" />
        <TypeParameter Name="TParam4" />
        <TypeParameter Name="TResult" />
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;TResult,TProperty&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TParam2">The type of the second query parameter.</typeparam>
        <typeparam name="TParam3">The type of the third query parameter.</typeparam>
        <typeparam name="TParam4">The type of the fourth query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <typeparam name="TProperty">The included property type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileQuery&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,TResult,TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; CompileQuery&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,TResult,TProperty&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;TResult,TProperty&gt;&gt;&gt; queryExpression) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`7&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, !!TParam4, !!TParam5, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; CompileQuery&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TResult, TProperty&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`7&lt;!!TContext, !!TParam1, !!TParam2, !!TParam3, !!TParam4, !!TParam5, class Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2&lt;!!TResult, !!TProperty&gt;&gt;&gt; queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.CompileQuery``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``6,``7}}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileQuery(Of TContext As DbContext, TParam1 As DbContext, TParam2 As DbContext, TParam3 As DbContext, TParam4 As DbContext, TParam5 As DbContext, TResult As DbContext, TProperty As DbContext) (queryExpression As Expression(Of Func(Of TContext, TParam1, TParam2, TParam3, TParam4, TParam5, IIncludableQueryable(Of TResult, TProperty)))) As Func(Of TContext, TParam1, TParam2, TParam3, TParam4, TParam5, IEnumerable(Of TResult))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
        <TypeParameter Name="TParam3" />
        <TypeParameter Name="TParam4" />
        <TypeParameter Name="TParam5" />
        <TypeParameter Name="TResult" />
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TContext,TParam1,TParam2,TParam3,TParam4,TParam5,Microsoft.EntityFrameworkCore.Query.IIncludableQueryable&lt;TResult,TProperty&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The target DbContext type.</typeparam>
        <typeparam name="TParam1">The type of the first query parameter.</typeparam>
        <typeparam name="TParam2">The type of the second query parameter.</typeparam>
        <typeparam name="TParam3">The type of the third query parameter.</typeparam>
        <typeparam name="TParam4">The type of the fourth query parameter.</typeparam>
        <typeparam name="TParam5">The type of the fifth query parameter.</typeparam>
        <typeparam name="TResult">The query result type.</typeparam>
        <typeparam name="TProperty">The included property type.</typeparam>
        <param name="queryExpression">The LINQ query expression.</param>
        <summary>
                Creates a compiled query delegate that when invoked will execute the specified LINQ query.
            </summary>
        <returns>A delegate that can be invoked to execute the compiled query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Functions">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.DbFunctions Functions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.EntityFrameworkCore.DbFunctions Functions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.EF.Functions" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Functions As DbFunctions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbFunctions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Provides CLR methods that get translated to database functions when used in LINQ to Entities queries.
                Calling these methods in other contexts (e.g. LINQ to Objects) will throw a <see cref="T:System.NotSupportedException" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public static TProperty Property&lt;TProperty&gt; (object entity, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TProperty Property&lt;TProperty&gt;(object entity, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.EF.Property``1(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Property(Of TProperty) (entity As Object, propertyName As String) As TProperty" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TProperty</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="propertyName" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.EntityFrameworkCore.Query.NotParameterized</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TProperty"> The type of the property being referenced. </typeparam>
        <param name="entity"> The entity to access the property on. </param>
        <param name="propertyName"> The name of the property. </param>
        <summary>
                Addresses a given property on an entity instance. This is useful when you want to reference a shadow state property in a
                LINQ query. Currently this method can only be used in LINQ queries and can not be used to access the value assigned to a
                property in other scenarios.
            </summary>
        <returns> The value assigned to the property. </returns>
        <remarks>To be added.</remarks>
        <example>
                The following code performs a filter using the a LastUpdated shadow state property.
                <code>
                    var blogs = context.Blogs
                        .Where(b =&gt; EF.Property&lt;DateTime&gt;(b, "LastUpdated") &gt; DateTime.Now.AddDays(-5))
                </code></example>
      </Docs>
    </Member>
  </Members>
</Type>